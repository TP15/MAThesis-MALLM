{"Output": "/*\n * Copyright 2019-2022 coreLang contributors <\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     \n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ncategory DataResources {\n\n    asset Information\n      user info: \"Represents any type of information that might be contained inside Data. This include general purpose information, but also serves as the basis for more specialized types, such as Credentials and SoftwareProduct. Information represents the abstract concept, while Data represent an actual instance of information stored or transmitted digitally.\"\n    {\n      | read\n        user info: \"The attacker is able to read the information. They may still be unable to extract it, which represents the adversary being able to read it themselves. This is the case if autonomous code is able to read it, but lack the required networking connections to transmit it back to the adversary.\"\n        ->  dataReplicas.read,\n            containerData.read\n\n      | write\n        user info: \"The attacker is able to write the information.\"\n        ->  dataReplicas.write,\n            containerData.write,\n            dependentApps.fullAccess,\n            delete\n\n      | delete\n        user info: \"The attacker is able to delete the information.\"\n        ->  dataReplicas.delete,\n            containerData.delete,\n            deny\n\n      | deny\n        user info: \"The attacker is able to deny the information.\"\n        ->  dataReplicas.deny,\n            containerData.deny,\n            dependentApps.deny\n\n      | extract\n        user info: \"The attacker is able to extract the information. This means that they have a path available through which they can transfer the information back to a system that they control.\"\n\n      // The following 5 attack steps are used to implement data replication\n      | attemptReadFromReplica @hidden\n        developer info: \"Reading one replica allows the attacker to read all other replicas as well since the information contained in them is the same.\"\n        ->  read\n\n      & attemptWriteFromReplica @hidden\n        developer info: \"Information can be overwritten only if all replicas have been overwritten.\"\n        ->  write\n\n      & attemptDeleteFromReplica @hidden\n        developer info: \"Information can be deleted only if all replicas have been deleted.\"\n        ->  delete\n\n      & attemptDenyFromReplica @hidden\n        developer info: \"Information can be denied only if all replicas have been denied.\"\n        ->  deny\n\n      | attemptExtractFromReplica @hidden\n        developer info: \"The attacker attempts to extract the information.\"\n        ->  extract\n    }\n\n    asset Data\n      user info: \"Any form of data that can be stored or transmitted.\"\n    {\n      # notPresent [Disabled]\n        user info: \"This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility of data not existing on the associated container (i.e. Hardware, Application, Network, etc.).\"\n        developer info: \"Enabling this defense should make the asset behave as if it did not exist, as such all of its impactful attack steps should be disabled by it.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDeny,\n            successfulDelete,\n            reverseReach,\n            extract\n\n      | authorizedAccessFromApplication @hidden\n        developer info: \"Try to gain access to the data through permissions.\"\n        ->  authorizedReadFromApplication,\n            authorizedWriteFromApplication,\n            authorizedDeleteFromApplication\n\n      !E dataEncrypted @hidden\n        developer info: \"If the data are encrypted then accessing them requires the associated encryption credentials/key. Data will be considered encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is triggered.\"\n        <-  encryptCreds\n        ->  accessUnencryptedData\n\n      !E dataSigned @hidden\n        developer info: \"If the data are signed then writing them requires the associated signing credentials/key. Data will be considered signed if there is at least one Credentials asset associated with it. Otherwise, 'accessUnsignedData' is triggered.\"\n        <-  signingCreds\n        ->  accessUnsignedData\n\n      E payloadInspectionBypassFromEncryptedData @hidden\n        developer info: \"If the data are encrypted then payload inspection cannot be performed on the connection rules they are transmitted over.\"\n        <-  encryptCreds\n        ->  bypassPayloadInspectionFromEncryptedData\n\n      let senderOutgoingApplicationConnections = (senderApp.appConnections \\/ senderApp.outgoingAppConnections)\n      let receiverIngoingApplicationConnections = (receiverApp.appConnections \\/ receiverApp.ingoingAppConnections)\n      let transitNetworkInboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.ingoingNetConnections \\/ transitNetwork.diodeIngoingNetConnections)\n      let transitNetworkOutboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.outgoingNetConnections)\n      | bypassPayloadInspectionFromEncryptedData @hidden\n        developer info: \"The connection rules that the encrypted data traverse over cannot provide payload inspection since they are assumed to permit encrypted traffic. This implies that the attacker could simply encrypt their own communications to evade inspection.\"\n        ->  (senderOutgoingApplicationConnections() /\\ transitNetworkInboundAllowedConnections()).payloadInspectionBypassed,\n            (receiverIngoingApplicationConnections() /\\ transitNetworkOutboundAllowedConnections()).payloadInspectionBypassed\n\n      & accessUnencryptedData @hidden\n        developer info: \"If data are unencrypted then access them.\"\n        ->  accessDecryptedData\n\n      & accessUnsignedData @hidden\n        developer info: \"If data are unsigned then alter them.\"\n        ->  accessSpoofedData\n\n      | accessSpoofedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnsignedData' on data after compromising the signing credentials or signing is disabled.\"\n        ->  applicationRespondConnect,\n            successfulWrite\n\n      | accessDecryptedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDelete\n\n      | attemptApplicationRespondConnect @hidden\n        developer info: \"Intermediate attack step to handle defenses.\"\n        ->  applicationRespondConnect\n\n      & applicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data.\"\n        ->  senderApp.attemptNetworkConnectFromResponse,\n            containedData.applicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromApplication @hidden\n        developer info: \"The adversary can attempt a respond connect attack from an Application, but they still require write permissions in order to perform it.\"\n        ->  authorizedApplicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to modify the incoming requests.\"\n        ->  authorizedApplicationRespondConnect\n\n      & authorizedApplicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data. If they only have specific access on the Application we need to see if they also have the required permissions.\"\n        ->  attemptApplicationRespondConnect\n\n      | attemptRead @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulRead\n\n      & successfulRead @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  read\n\n      | read {C}\n        user info: \"The attacker can read the data. This means that the data can be used for further attack steps, but they are not necessarily obtained by the attacker. The extract attack step covers the scenario where the attacker actually collects the data.\"\n        ->  containedData.attemptRead,\n            information.read,\n            replicatedInformation.attemptReadFromReplica,\n            extract\n\n      | authorizedReadFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to read the data.\"\n        ->  authorizedRead\n\n      | authorizedReadFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to read it.\"\n        ->  authorizedRead\n\n      & authorizedRead @hidden\n        developer info: \"An attacker is able to read the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptRead\n\n      | attemptWrite @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulWrite\n\n      & successfulWrite @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  write\n\n      | write {I}\n        user info: \"The attacker can write to the location of the data, effectively modifying or deleting it.\"\n        ->  containedData.attemptWrite,\n            information.write,\n            replicatedInformation.attemptWriteFromReplica,\n            dependentApps.fullAccess,\n            attemptDelete\n\n      | authorizedWriteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to write the data.\"\n        ->  authorizedWrite\n\n      | authorizedWriteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to write it.\"\n        ->  authorizedWrite\n\n      & authorizedWrite @hidden\n        developer info: \"An attacker is able to write the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptWrite\n\n      | attemptDelete @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        -> successfulDelete\n\n      & successfulDelete @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  delete\n\n      | delete {I,A}\n        user info: \"The attacker can delete the data.\"\n        ->  containedData.attemptDelete,\n            information.delete,\n            replicatedInformation.attemptDeleteFromReplica,\n            attemptDeny\n\n      | authorizedDeleteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to delete the data.\"\n        ->  authorizedDelete\n\n      | authorizedDeleteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to delete it.\"\n        ->  authorizedDelete\n\n      & authorizedDelete @hidden\n        developer info: \"An attacker is able to delete the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptDelete\n\n      | attemptDeny @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulDeny\n\n      & successfulDeny @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  deny\n\n      | deny {A}\n        user info: \"If a DoS is performed data are denied, it has the same effects as deleting the data.\"\n        ->  containedData.attemptDeny,\n            information.deny,\n            replicatedInformation.attemptDenyFromReplica,\n            dependentApps.deny\n\n      & denyFromLockout @hidden\n        developer info: \"This is an intermediate attack step to only trigger deny on data when all the access control roles that can read them are locked out.\"\n        ->  attemptDeny\n\n      | attemptReverseReach @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  reverseReach\n\n      & reverseReach @hidden\n        developer info: \"Reverse reach for Data is used to determine whether or not the data can be transferred to attacker.\"\n        ->  extract,\n            containedData.attemptReverseReach\n\n      & extract\n        user info: \"The attacker can extract the data. The read attack step represents just being able to make use of the data for further attack steps without the attacker obtaining it.\"\n        ->  information.extract,\n            replicatedInformation.attemptExtractFromReplica\n    }\n}\n\nassociations {\n  // ### Data related associations\n  Data        [containingData]       * <-- DataContainment       --> *    [containedData]          Data\n      user info: \"Data can be contained inside other data.\"\n  Data        [containedData]        * <-- AppContainment        --> *    [containingApp]          Application\n      user info: \"An application should be able to contain some data.\"\n  Data        [sentData]             * <-- SendData              --> *    [senderApp]              Application\n      user info: \"An application can also send some data that are supposed to be transferred over a network or connection. This expresses an active connection.\"\n  Data        [receivedData]         * <-- ReceiveData           --> *    [receiverApp]            Application\n      user info: \"An application can also receive some data that are supposed to be transferred over a network or connection. This expresses an active connection.\"\n  Data        [transitData]          * <-- DataInTransit         --> *    [transitNetwork]         Network\n      user info: \"A network can also contain some data that are supposed to be network-wide available.\"\n  Data        [hostedData]           * <-- DataHosting           --> 0..1 [hardware]               Hardware\n      user info: \"Data can be hosted on hardware.\"\n  Data        [containerData]        * <-- InfoContainment       --> *    [information]            Information\n      user info: \"Data can contain information, as for example credentials.\"\n  Data        [dataReplicas]         * <-- Replica               --> *    [replicatedInformation]  Information\n      user info: \"Information can be replicated across multiple data assets that offer redundancy.\"\n  // ### Application dependence associations\n  /* Dependence is used to represent various situations where the operations\n   * of the Application are impacted by modifying/denying the Data/Information\n   * it depends upon. Examples of this type of behavior are configurations,\n   * plugins, libraries, or other input data that is critical to the purpose\n   * of the software component represented by the Application. This\n   * association should only be used for circumstances where the workflow of\n   * the Application is not altered, but the Data/Information are modified\n   * within the regular operating process. For situations where abnormal\n   * behaviour is induced to impact the Application SoftwareVulnerabilities\n   * should be used instead.\n   */\n  Data        [dataDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application\n      user info: \"Data can be specified as a dependence for an Application.\"\n  Information [infoDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application\n      user info: \"Information can be specified as a dependence for an Application.\"\n}", "Type": "language"}
{"Output": "category DataResources {\n\n    asset Information\n      user info: \"Represents any type of information that might be contained inside Data. This include general purpose information, but also serves as the basis for more specialized types, such as Credentials and SoftwareProduct. Information represents the abstract concept, while Data represent an actual instance of information stored or transmitted digitally.\"\n    {\n      | read\n        user info: \"The attacker is able to read the information. They may still be unable to extract it, which represents the adversary being able to read it themselves. This is the case if autonomous code is able to read it, but lack the required networking connections to transmit it back to the adversary.\"\n        ->  dataReplicas.read,\n            containerData.read\n\n      | write\n        user info: \"The attacker is able to write the information.\"\n        ->  dataReplicas.write,\n            containerData.write,\n            dependentApps.fullAccess,\n            delete\n\n      | delete\n        user info: \"The attacker is able to delete the information.\"\n        ->  dataReplicas.delete,\n            containerData.delete,\n            deny\n\n      | deny\n        user info: \"The attacker is able to deny the information.\"\n        ->  dataReplicas.deny,\n            containerData.deny,\n            dependentApps.deny\n\n      | extract\n        user info: \"The attacker is able to extract the information. This means that they have a path available through which they can transfer the information back to a system that they control.\"\n\n      // The following 5 attack steps are used to implement data replication\n      | attemptReadFromReplica @hidden\n        developer info: \"Reading one replica allows the attacker to read all other replicas as well since the information contained in them is the same.\"\n        ->  read\n\n      & attemptWriteFromReplica @hidden\n        developer info: \"Information can be overwritten only if all replicas have been overwritten.\"\n        ->  write\n\n      & attemptDeleteFromReplica @hidden\n        developer info: \"Information can be deleted only if all replicas have been deleted.\"\n        ->  delete\n\n      & attemptDenyFromReplica @hidden\n        developer info: \"Information can be denied only if all replicas have been denied.\"\n        ->  deny\n\n      | attemptExtractFromReplica @hidden\n        developer info: \"The attacker attempts to extract the information.\"\n        ->  extract\n    }\n\n    asset Data\n      user info: \"Any form of data that can be stored or transmitted.\"\n    {\n      # notPresent [Disabled]\n        user info: \"This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility of data not existing on the associated container (i.e. Hardware, Application, Network, etc.).\"\n        developer info: \"Enabling this defense should make the asset behave as if it did not exist, as such all of its impactful attack steps should be disabled by it.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDeny,\n            successfulDelete,\n            reverseReach,\n            extract\n\n      | authorizedAccessFromApplication @hidden\n        developer info: \"Try to gain access to the data through permissions.\"\n        ->  authorizedReadFromApplication,\n            authorizedWriteFromApplication,\n            authorizedDeleteFromApplication\n\n      !E dataEncrypted @hidden\n        developer info: \"If the data are encrypted then accessing them requires the associated encryption credentials/key. Data will be considered encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is triggered.\"\n        <-  encryptCreds\n        ->  accessUnencryptedData\n\n      !E dataSigned @hidden\n        developer info: \"If the data are signed then writing them requires the associated signing credentials/key. Data will be considered signed if there is at least one Credentials asset associated with it. Otherwise, 'accessUnsignedData' is triggered.\"\n        <-  signingCreds\n        ->  accessUnsignedData\n\n      E payloadInspectionBypassFromEncryptedData @hidden\n        developer info: \"If the data are encrypted then payload inspection cannot be performed on the connection rules they are transmitted over.\"\n        <-  encryptCreds\n        ->  bypassPayloadInspectionFromEncryptedData\n\n      let senderOutgoingApplicationConnections = (senderApp.appConnections \\/ senderApp.outgoingAppConnections)\n      let receiverIngoingApplicationConnections = (receiverApp.appConnections \\/ receiverApp.ingoingAppConnections)\n      let transitNetworkInboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.ingoingNetConnections \\/ transitNetwork.diodeIngoingNetConnections)\n      let transitNetworkOutboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.outgoingNetConnections)\n      | bypassPayloadInspectionFromEncryptedData @hidden\n        developer info: \"The connection rules that the encrypted data traverse over cannot provide payload inspection since they are assumed to permit encrypted traffic. This implies that the attacker could simply encrypt their own communications to evade inspection.\"\n        ->  (senderOutgoingApplicationConnections() /\\ transitNetworkInboundAllowedConnections()).payloadInspectionBypassed,\n            (receiverIngoingApplicationConnections() /\\ transitNetworkOutboundAllowedConnections()).payloadInspectionBypassed\n\n      & accessUnencryptedData @hidden\n        developer info: \"If data are unencrypted then access them.\"\n        ->  accessDecryptedData\n\n      & accessUnsignedData @hidden\n        developer info: \"If data are unsigned then alter them.\"\n        ->  accessSpoofedData\n\n      | accessSpoofedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnsignedData' on data after compromising the signing credentials or signing is disabled.\"\n        ->  applicationRespondConnect,\n            successfulWrite\n\n      | accessDecryptedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDelete\n\n      | attemptApplicationRespondConnect @hidden\n        developer info: \"Intermediate attack step to handle defenses.\"\n        ->  applicationRespondConnect\n\n      & applicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data.\"\n        ->  senderApp.attemptNetworkConnectFromResponse,\n            containedData.applicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromApplication @hidden\n        developer info: \"The adversary can attempt a respond connect attack from an Application, but they still require write permissions in order to perform it.\"\n        ->  authorizedApplicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to modify the incoming requests.\"\n        ->  authorizedApplicationRespondConnect\n\n      & authorizedApplicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data. If they only have specific access on the Application we need to see if they also have the required permissions.\"\n        ->  attemptApplicationRespondConnect\n\n      | attemptRead @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulRead\n\n      & successfulRead @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  read\n\n      | read {C}\n        user info: \"The attacker can read the data. This means that the data can be used for further attack steps, but they are not necessarily obtained by the attacker. The extract attack step covers the scenario where the attacker actually collects the data.\"\n        ->  containedData.attemptRead,\n            information.read,\n            replicatedInformation.attemptReadFromReplica,\n            extract\n\n      | authorizedReadFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to read the data.\"\n        ->  authorizedRead\n\n      | authorizedReadFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to read it.\"\n        ->  authorizedRead\n\n      & authorizedRead @hidden\n        developer info: \"An attacker is able to read the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptRead\n\n      | attemptWrite @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulWrite\n\n      & successfulWrite @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  write\n\n      | write {I}\n        user info: \"The attacker can write to the location of the data, effectively modifying or deleting it.\"\n        ->  containedData.attemptWrite,\n            information.write,\n            replicatedInformation.attemptWriteFromReplica,\n            dependentApps.fullAccess,\n            attemptDelete\n\n      | authorizedWriteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to write the data.\"\n        ->  authorizedWrite\n\n      | authorizedWriteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to write it.\"\n        ->  authorizedWrite\n\n      & authorizedWrite @hidden\n        developer info: \"An attacker is able to write the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptWrite\n\n      | attemptDelete @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        -> successfulDelete\n\n      & successfulDelete @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  delete\n\n      | delete {I,A}\n        user info: \"The attacker can delete the data.\"\n        ->  containedData.attemptDelete,\n            information.delete,\n            replicatedInformation.attemptDeleteFromReplica,\n            attemptDeny\n\n      | authorizedDeleteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to delete the data.\"\n        ->  authorizedDelete\n\n      | authorizedDeleteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to delete it.\"\n        ->  authorizedDelete\n\n      & authorizedDelete @hidden\n        developer info: \"An attacker is able to delete the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptDelete\n\n      | attemptDeny @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulDeny\n\n      & successfulDeny @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  deny\n\n      | deny {A}\n        user info: \"If a DoS is performed data are denied, it has the same effects as deleting the data.\"\n        ->  containedData.attemptDeny,\n            information.deny,\n            replicatedInformation.attemptDenyFromReplica,\n            dependentApps.deny\n\n      & denyFromLockout @hidden\n        developer info: \"This is an intermediate attack step to only trigger deny on data when all the access control roles that can read them are locked out.\"\n        ->  attemptDeny\n\n      | attemptReverseReach @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  reverseReach\n\n      & reverseReach @hidden\n        developer info: \"Reverse reach for Data is used to determine whether or not the data can be transferred to attacker.\"\n        ->  extract,\n            containedData.attemptReverseReach\n\n      & extract\n        user info: \"The attacker can extract the data. The read attack step represents just being able to make use of the data for further attack steps without the attacker obtaining it.\"\n        ->  information.extract,\n            replicatedInformation.attemptExtractFromReplica\n    }\n}", "Type": "category"}
{"Output": "asset Information\n      user info: \"Represents any type of information that might be contained inside Data. This include general purpose information, but also serves as the basis for more specialized types, such as Credentials and SoftwareProduct. Information represents the abstract concept, while Data represent an actual instance of information stored or transmitted digitally.\"\n    {\n      | read\n        user info: \"The attacker is able to read the information. They may still be unable to extract it, which represents the adversary being able to read it themselves. This is the case if autonomous code is able to read it, but lack the required networking connections to transmit it back to the adversary.\"\n        ->  dataReplicas.read,\n            containerData.read\n\n      | write\n        user info: \"The attacker is able to write the information.\"\n        ->  dataReplicas.write,\n            containerData.write,\n            dependentApps.fullAccess,\n            delete\n\n      | delete\n        user info: \"The attacker is able to delete the information.\"\n        ->  dataReplicas.delete,\n            containerData.delete,\n            deny\n\n      | deny\n        user info: \"The attacker is able to deny the information.\"\n        ->  dataReplicas.deny,\n            containerData.deny,\n            dependentApps.deny\n\n      | extract\n        user info: \"The attacker is able to extract the information. This means that they have a path available through which they can transfer the information back to a system that they control.\"\n\n      // The following 5 attack steps are used to implement data replication\n      | attemptReadFromReplica @hidden\n        developer info: \"Reading one replica allows the attacker to read all other replicas as well since the information contained in them is the same.\"\n        ->  read\n\n      & attemptWriteFromReplica @hidden\n        developer info: \"Information can be overwritten only if all replicas have been overwritten.\"\n        ->  write\n\n      & attemptDeleteFromReplica @hidden\n        developer info: \"Information can be deleted only if all replicas have been deleted.\"\n        ->  delete\n\n      & attemptDenyFromReplica @hidden\n        developer info: \"Information can be denied only if all replicas have been denied.\"\n        ->  deny\n\n      | attemptExtractFromReplica @hidden\n        developer info: \"The attacker attempts to extract the information.\"\n        ->  extract\n    }", "Type": "asset"}
{"Output": "asset Data\n      user info: \"Any form of data that can be stored or transmitted.\"\n    {\n      # notPresent [Disabled]\n        user info: \"This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility of data not existing on the associated container (i.e. Hardware, Application, Network, etc.).\"\n        developer info: \"Enabling this defense should make the asset behave as if it did not exist, as such all of its impactful attack steps should be disabled by it.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDeny,\n            successfulDelete,\n            reverseReach,\n            extract\n\n      | authorizedAccessFromApplication @hidden\n        developer info: \"Try to gain access to the data through permissions.\"\n        ->  authorizedReadFromApplication,\n            authorizedWriteFromApplication,\n            authorizedDeleteFromApplication\n\n      !E dataEncrypted @hidden\n        developer info: \"If the data are encrypted then accessing them requires the associated encryption credentials/key. Data will be considered encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is triggered.\"\n        <-  encryptCreds\n        ->  accessUnencryptedData\n\n      !E dataSigned @hidden\n        developer info: \"If the data are signed then writing them requires the associated signing credentials/key. Data will be considered signed if there is at least one Credentials asset associated with it. Otherwise, 'accessUnsignedData' is triggered.\"\n        <-  signingCreds\n        ->  accessUnsignedData\n\n      E payloadInspectionBypassFromEncryptedData @hidden\n        developer info: \"If the data are encrypted then payload inspection cannot be performed on the connection rules they are transmitted over.\"\n        <-  encryptCreds\n        ->  bypassPayloadInspectionFromEncryptedData\n\n      let senderOutgoingApplicationConnections = (senderApp.appConnections \\/ senderApp.outgoingAppConnections)\n      let receiverIngoingApplicationConnections = (receiverApp.appConnections \\/ receiverApp.ingoingAppConnections)\n      let transitNetworkInboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.ingoingNetConnections \\/ transitNetwork.diodeIngoingNetConnections)\n      let transitNetworkOutboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.outgoingNetConnections)\n      | bypassPayloadInspectionFromEncryptedData @hidden\n        developer info: \"The connection rules that the encrypted data traverse over cannot provide payload inspection since they are assumed to permit encrypted traffic. This implies that the attacker could simply encrypt their own communications to evade inspection.\"\n        ->  (senderOutgoingApplicationConnections() /\\ transitNetworkInboundAllowedConnections()).payloadInspectionBypassed,\n            (receiverIngoingApplicationConnections() /\\ transitNetworkOutboundAllowedConnections()).payloadInspectionBypassed\n\n      & accessUnencryptedData @hidden\n        developer info: \"If data are unencrypted then access them.\"\n        ->  accessDecryptedData\n\n      & accessUnsignedData @hidden\n        developer info: \"If data are unsigned then alter them.\"\n        ->  accessSpoofedData\n\n      | accessSpoofedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnsignedData' on data after compromising the signing credentials or signing is disabled.\"\n        ->  applicationRespondConnect,\n            successfulWrite\n\n      | accessDecryptedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDelete\n\n      | attemptApplicationRespondConnect @hidden\n        developer info: \"Intermediate attack step to handle defenses.\"\n        ->  applicationRespondConnect\n\n      & applicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data.\"\n        ->  senderApp.attemptNetworkConnectFromResponse,\n            containedData.applicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromApplication @hidden\n        developer info: \"The adversary can attempt a respond connect attack from an Application, but they still require write permissions in order to perform it.\"\n        ->  authorizedApplicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to modify the incoming requests.\"\n        ->  authorizedApplicationRespondConnect\n\n      & authorizedApplicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data. If they only have specific access on the Application we need to see if they also have the required permissions.\"\n        ->  attemptApplicationRespondConnect\n\n      | attemptRead @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulRead\n\n      & successfulRead @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  read\n\n      | read {C}\n        user info: \"The attacker can read the data. This means that the data can be used for further attack steps, but they are not necessarily obtained by the attacker. The extract attack step covers the scenario where the attacker actually collects the data.\"\n        ->  containedData.attemptRead,\n            information.read,\n            replicatedInformation.attemptReadFromReplica,\n            extract\n\n      | authorizedReadFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to read the data.\"\n        ->  authorizedRead\n\n      | authorizedReadFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to read it.\"\n        ->  authorizedRead\n\n      & authorizedRead @hidden\n        developer info: \"An attacker is able to read the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptRead\n\n      | attemptWrite @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulWrite\n\n      & successfulWrite @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  write\n\n      | write {I}\n        user info: \"The attacker can write to the location of the data, effectively modifying or deleting it.\"\n        ->  containedData.attemptWrite,\n            information.write,\n            replicatedInformation.attemptWriteFromReplica,\n            dependentApps.fullAccess,\n            attemptDelete\n\n      | authorizedWriteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to write the data.\"\n        ->  authorizedWrite\n\n      | authorizedWriteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to write it.\"\n        ->  authorizedWrite\n\n      & authorizedWrite @hidden\n        developer info: \"An attacker is able to write the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptWrite\n\n      | attemptDelete @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        -> successfulDelete\n\n      & successfulDelete @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  delete\n\n      | delete {I,A}\n        user info: \"The attacker can delete the data.\"\n        ->  containedData.attemptDelete,\n            information.delete,\n            replicatedInformation.attemptDeleteFromReplica,\n            attemptDeny\n\n      | authorizedDeleteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to delete the data.\"\n        ->  authorizedDelete\n\n      | authorizedDeleteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to delete it.\"\n        ->  authorizedDelete\n\n      & authorizedDelete @hidden\n        developer info: \"An attacker is able to delete the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptDelete\n\n      | attemptDeny @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulDeny\n\n      & successfulDeny @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  deny\n\n      | deny {A}\n        user info: \"If a DoS is performed data are denied, it has the same effects as deleting the data.\"\n        ->  containedData.attemptDeny,\n            information.deny,\n            replicatedInformation.attemptDenyFromReplica,\n            dependentApps.deny\n\n      & denyFromLockout @hidden\n        developer info: \"This is an intermediate attack step to only trigger deny on data when all the access control roles that can read them are locked out.\"\n        ->  attemptDeny\n\n      | attemptReverseReach @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  reverseReach\n\n      & reverseReach @hidden\n        developer info: \"Reverse reach for Data is used to determine whether or not the data can be transferred to attacker.\"\n        ->  extract,\n            containedData.attemptReverseReach\n\n      & extract\n        user info: \"The attacker can extract the data. The read attack step represents just being able to make use of the data for further attack steps without the attacker obtaining it.\"\n        ->  information.extract,\n            replicatedInformation.attemptExtractFromReplica\n    }", "Type": "asset"}
{"Output": "associations {\n  // ### Data related associations\n  Data        [containingData]       * <-- DataContainment       --> *    [containedData]          Data\n      user info: \"Data can be contained inside other data.\"\n  Data        [containedData]        * <-- AppContainment        --> *    [containingApp]          Application\n      user info: \"An application should be able to contain some data.\"\n  Data        [sentData]             * <-- SendData              --> *    [senderApp]              Application\n      user info: \"An application can also send some data that are supposed to be transferred over a network or connection. This expresses an active connection.\"\n  Data        [receivedData]         * <-- ReceiveData           --> *    [receiverApp]            Application\n      user info: \"An application can also receive some data that are supposed to be transferred over a network or connection. This expresses an active connection.\"\n  Data        [transitData]          * <-- DataInTransit         --> *    [transitNetwork]         Network\n      user info: \"A network can also contain some data that are supposed to be network-wide available.\"\n  Data        [hostedData]           * <-- DataHosting           --> 0..1 [hardware]               Hardware\n      user info: \"Data can be hosted on hardware.\"\n  Data        [containerData]        * <-- InfoContainment       --> *    [information]            Information\n      user info: \"Data can contain information, as for example credentials.\"\n  Data        [dataReplicas]         * <-- Replica               --> *    [replicatedInformation]  Information\n      user info: \"Information can be replicated across multiple data assets that offer redundancy.\"\n  // ### Application dependence associations\n  /* Dependence is used to represent various situations where the operations\n   * of the Application are impacted by modifying/denying the Data/Information\n   * it depends upon. Examples of this type of behavior are configurations,\n   * plugins, libraries, or other input data that is critical to the purpose\n   * of the software component represented by the Application. This\n   * association should only be used for circumstances where the workflow of\n   * the Application is not altered, but the Data/Information are modified\n   * within the regular operating process. For situations where abnormal\n   * behaviour is induced to impact the Application SoftwareVulnerabilities\n   * should be used instead.\n   */\n  Data        [dataDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application\n      user info: \"Data can be specified as a dependence for an Application.\"\n  Information [infoDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application\n      user info: \"Information can be specified as a dependence for an Application.\"\n}", "Type": "association"}
