{"instruction": "Translate the grouping below into a category definition in Meta Attack Language.", "input": "In this model, the focus is on the ComputeResources category, which encompasses various assets within an Industrial Control System (ICS). Here's a breakdown of some of the key components and their relationships:\n\n1. IcsHardware: This asset represents ICS hardware systems, which can extend the core system's attack surface with more vulnerabilities. These systems may have physical or full access, allowing adversaries to perform a variety of actions such as manipulating firmware, causing loss of safety, control, view, or availability, and damaging property.\n\n   - Modular hardware devices may have malicious or vulnerable firmware installed (MITRE ATT&CK ICS T839).\n   - Verification of module firmware upon boot-up or operation can help mitigate this issue.\n   - Using cryptography keys for firmware updates and authenticated firmware updates can also serve as mitigations.\n   - The system firmware is also at risk of exploitation, allowing adversaries to upload malicious or out-of-date firmware.\n   - If the ICS system is not connected to a Safety Instrumented System (SIS), safety mechanisms should be disabled (MITRE ATT&CK ICS T880).\n\n2. IcsApplication: This asset represents ICS applications, which extend the core system's attack surface with OT (Operational Technology) attack vectors. These applications may be manipulated to operate outside of normal parameters, resulting in restricted operation, loss of control, loss of view, or other impacts.\n\n3. Sensor: This asset generates data but may not have any associated software or host. Sensors can be vulnerable to attacks if an adversary gains physical access to them, potentially manipulating or blocking signals or data.\n\n4. Actuator: This asset consumes data but may not have any associated software or host. If the consumed signal is manipulated or blocked, it can lead to manipulation of control or loss of control on the associated system.\n\n5. SynchronizationModule: This asset provides synchronization capabilities, such as GPS receivers or network-based synchronization modules. Compromising this module can lead to manipulation of clock frequency, time, or even stopping the clock, which may result in manipulation of control, manipulation of view, loss of control, or loss of view on synchronized applications.", "output": "category ComputeResources {\n\n    asset IcsHardware extends Hardware\n      user info: \"An ICS System extends the coreLang's System with more attack vectors.\"\n      developer info: \"For example, the attacker can additionally peform ATT&CK ICS T847 'Replication Through Removable Media', T862 'Supply Chain Attack' and more.\"\n    {\n      | physicalAccess @Override\n        +>  moduleFirmware,\n            systemFirmware\n\n      | fullAccess @Override\n        +>  lossOfSafety,\n            lossOfControl,\n            lossOfAvailability,\n            manipulationOfView,\n            manipulationOfControl\n\n      & moduleFirmware\n        user info: \"Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices.\"\n        developer info: \"MITRE ATT&CK ICS T839.\"\n        ->  fullAccess\n\n      # moduleFirmwareVerification\n        user info: \"Verify the module's firmwares from the main firmware upon boot-up or during normal operation. Mitigation for MITRE ATT&CK ICS T839.\"\n        developer info: \"Mitigation was vaguely listed on MITRE ATT&CK ICS.\"\n        ->  moduleFirmware\n\n      # useCryptographyKeyForFirmware\n        user info: \"If a cryptographic key is used for firmware updates, the firmware will be harder to be altered. Mitigation for MITRE ATT&CK ICS T839 and T857.\"\n        developer info: \"Mitigation was listed on MITRE ATT&CK ICS.\"\n        ->  moduleFirmware,\n            systemFirmware\n\n      # useAuthenticatedFirmwareUpdates\n        user info: \"If authentication of the source and data is performed, malicious firmware alteration will be significantly harder. Mitigation for MITRE ATT&CK ICS T839 and T857.\"\n        developer info: \"Mitigation was listed on MITRE ATT&CK ICS.\"\n        ->  moduleFirmware,\n            systemFirmware\n\n      & systemFirmware\n        user info: \"An adversary may exploit the firmware update feature on accessible devices to upload malicious or out-of-date firmware.\"\n        developer info: \"MITRE ATT&CK ICS T857.\"\n        ->  fullAccess\n\n      | deny @Override {A}\n        +>  lossOfAvailability\n\n      !E sisConnected @hidden\n        developer info: \"If the ICS system is not connected to an SIS the safety mechanisms should be disabled\"\n        <-  sis\n        ->  safetyMechanismsOffline\n\n      // Impact attack steps\n      | attemptPreemptiveShutdown @hidden\n        user info: \"Intermediate attack step for modelling the possibility of detecting a disruption(loss of Control/View) and preemptively shutting down the system in order to prevent damage.\"\n        ->  attemptShutdown,\n            attemptUnsafeState\n\n      | attemptPreemptiveShutdownOnSafetyLoss @hidden\n        user info: \"Intermediate attack step for modelling the possibility of detecting a disruption(loss of Safety) and preemptively shutting down the system because of concerns. The loss of safety alone does not trigger either a shutdown or generate an unsafe state as control and view are expected to maintain the system operating within normal parameters.\"\n        ->  attemptShutdown\n\n      | attemptShutdown @hidden [Bernoulli(0.1)]\n        developer info: \"This is the actual preemptive shutdown operation. The specific probability should be researched more and maybe defined by the modeller.\"\n        ->  shutdown\n\n      | attemptUnsafeState @hidden [Bernoulli(0.1)]\n        developer info: \"This attack step models the possibility that a naturally occurring unsafe state is reached if there is a loss of control or view. The specific probability should be researched more and maybe defined by the modeller.\"\n        ->  unsafeState\n\n      | unsafeState @hidden\n        developer info: \"The system can only be damaged if it has reached an unsafe operating state. If the safety mechanisms are still functional the system will shutdown without taking damage, otherwise the damage done to the system will bring it down.\"\n        ->  damageToProperty,\n            shutdown\n\n      | lossOfSafety\n        user info: \"Adversaries may cause loss of safety whether on purpose or as a consequence of actions taken to accomplish an operation.\"\n        developer info: \"MITRE ATT&CK ICS T880.\"\n        ->  safetyMechanismsOffline,\n            attemptPreemptiveShutdownOnSafetyLoss\n\n      | safetyMechanismsOffline @hidden\n        user info: \"Physical assets should only be damaged if the safety mechanisms fail to shutdown the system to prevent damage\"\n        ->  damageToProperty\n\n      | shutdown {A}\n        user info: \"Shutdown the system. Can be initiated by the attacker intentionally to disrupt the industrial process or unintentionally by tampering with system and accidentally triggering the safety shutdown procedures. If the staff detect anomalous behaviour and they can decide to preemptively shut the system down to prevent potential damage.\"\n        ->  lossOfAvailability,\n            criticalParentSystem.propagateCriticalShutdown,\n            triggerPropagateRedundantShutdown\n\n      | triggerPropagateRedundantShutdown @hidden\n        developer info: \"This is an intermediary step required for the situation where SIS redundant subsystems are disabled.\"\n        ->  redundantParentSystem.propagateRedundantShutdown\n\n      & damageToProperty {I, A}\n        user info: \"Adversaries may cause damage and destruction of property to infrastructure, equipment, and the surrounding environment when attacking control systems.\"\n        developer info: \"MITRE ATT&CK ICS T879.\"\n        ->  shutdown,\n            lossOfProductivityAndRevenue\n\n      | lossOfControl {A}\n        user info: \"Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided.\"\n        developer info: \"MITRE ATT&CK ICS T827.\"\n        ->  attemptPreemptiveShutdown,\n            criticalParentSystem.propagateCriticalLossOfControl,\n            redundantParentSystem.propagateRedundantLossOfControl\n\n      | lossOfView {A}\n        user info: \"Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention.\"\n        developer info: \"MITRE ATT&CK ICS T829.\"\n        ->  attemptPreemptiveShutdown,\n            criticalParentSystem.propagateCriticalLossOfView,\n            redundantParentSystem.propagateRedundantLossOfView\n\n      | lossOfAvailability {A}\n        user info: \"Adversaries may attempt to disrupt essential components or systems to prevent owner and operator from delivering products or services.\"\n        developer info: \"MITRE ATT&CK ICS T826.\"\n        ->  lossOfProductivityAndRevenue,\n            criticalParentSystem.propagateCriticalLossOfAvailability,\n            redundantParentSystem.propagateRedundantLossOfAvailability\n\n      | lossOfProductivityAndRevenue\n        user info: \"Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes.\"\n        developer info: \"MITRE ATT&CK ICS T828.\"\n        ->  criticalParentSystem.propagateCriticalLossOfProductivityAndRevenue,\n            redundantParentSystem.propagateRedundantLossOfProductivityAndRevenue\n\n      | manipulationOfControl {I, A}\n        user info: \"Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes.\"\n        developer info: \"MITRE ATT&CK ICS T831.\"\n        ->  unsafeState,\n            criticalParentSystem.propagateCriticalManipulationOfControl,\n            redundantParentSystem.propagateRedundantManipulationOfControl\n\n      | manipulationOfView {I, A}\n        user info: \"Adversaries may attempt to manipulate the information reported back to operators or controllers.\"\n        developer info: \"MITRE ATT&CK ICS T832.\"\n        ->  unsafeState,\n            criticalParentSystem.propagateCriticalManipulationOfView,\n            redundantParentSystem.propagateRedundantManipulationOfView\n\n      // Propagate subsystems attack steps\n      // Critical subsystems\n      | propagateCriticalShutdown @hidden\n        user info: \"Propagate shutdown to the parent system if any of the critical subsystems experience a shutdown\"\n        -> shutdown\n\n      | propagateCriticalLossOfControl @hidden\n        user info: \"Propagate loss of control to the parent system if any of the critical subsystems experience a loss of control\"\n        -> lossOfControl\n\n      | propagateCriticalLossOfView @hidden\n        user info: \"Propagate loss of view to the parent system if any of the critical subsystems experience a loss of view\"\n        -> lossOfView\n\n      | propagateCriticalManipulationOfControl @hidden\n        user info: \"Propagate manipulation of control to the parent system if any of the critical subsystems experience a manipulation of control\"\n        -> manipulationOfControl\n\n      | propagateCriticalManipulationOfView @hidden\n        user info: \"Propagate manipulation of view to the parent system if any of the critical subsystems experience a manipulation of view\"\n        -> manipulationOfView\n\n      | propagateCriticalLossOfAvailability @hidden\n        user info: \"Propagate loss of availability to the parent system if any of the critical subsystems experience a loss of availability\"\n        -> lossOfAvailability\n\n      | propagateCriticalLossOfProductivityAndRevenue @hidden\n        user info: \"Propagate loss of productivity and revenue to the parent system if any of the critical subsystems experience a loss of productivity and revenue\"\n        -> lossOfProductivityAndRevenue\n\n      // Redundant subsystems\n      & propagateRedundantShutdown @hidden\n        user info: \"Propagate shutdown to the parent system if all of the redundant subsystems experience a shutdown\"\n        -> shutdown\n\n      & propagateRedundantLossOfControl @hidden\n        user info: \"Propagate loss of control to the parent system if all of the redundant subsystems experience a loss of control\"\n        -> lossOfControl\n\n      & propagateRedundantLossOfView @hidden\n        user info: \"Propagate loss of view to the parent system if all of the redundant subsystems experience a loss of view\"\n        -> lossOfView\n\n      & propagateRedundantManipulationOfControl @hidden\n        user info: \"Propagate manipulation of control to the parent system if all of the redundant subsystems experience a manipulation of control\"\n        -> manipulationOfControl\n\n      & propagateRedundantManipulationOfView @hidden\n        user info: \"Propagate manipulation of view to the parent system if all of the redundant subsystems experience a manipulation of view\"\n        -> manipulationOfView\n\n      & propagateRedundantLossOfAvailability @hidden\n        user info: \"Propagate loss of availability to the parent system if all of the redundant subsystems experience a loss of availability\"\n        -> lossOfAvailability\n\n      & propagateRedundantLossOfProductivityAndRevenue @hidden\n        user info: \"Propagate loss of productivity and revenue to the parent system if all of the redundant subsystems experience a loss of productivity and revenue\"\n        -> lossOfProductivityAndRevenue\n\n      # notDisabled [Enabled]\n        developer info: \"The probability that a particular IcsHardware is not actually present.\"\n        modeler info: \"The use case for this is removing some of the IcsHardwares used to provide redundancy.\"\n        -> lossOfControl,\n           lossOfView,\n           lossOfAvailability,\n           lossOfProductivityAndRevenue,\n           manipulationOfControl,\n           manipulationOfView,\n           shutdown\n\n    }\n\n     asset IcsApplication extends Application\n      user info: \"An ICS Application extends the coreLang's Application with OT attack vectors.\"\n    {\n      | specificAccess @Override\n        +>  normalOperation\n\n      | fullAccess @Override\n        +>  normalOperation,\n            attemptManipulation\n\n      | normalOperation\n        user info: \"The state where the operational component is operating normally or seems to be operating normally (but is undetectably manipulated within the safety limits).\"\n        developer info: \"I am not sure if we need this. But I keep it to add one more vector that we can model! (Sotirios)\"\n        ->  attemptCovertManipulation\n\n      | restrictedOperation {I,A}\n        user info: \"When the operational component is compromised, the operation of it is affected.\"\n\n      | read @Override {C}\n        +>  theftOfOperationalInformation\n\n      | deny @Override {A}\n        +>  lossOfControl,\n            lossOfView,\n            hostHardware[IcsHardware].lossOfAvailability\n\n      & attemptCovertManipulation [HardAndUncertain]\n        user info: \"If an application is operating normally it could even be the case that it is elaborately manipulated by an adversary.\"\n        ->  attemptManipulation\n\n      | attemptManipulation\n        user info: \"The adversary is actively manipulating the system outside of normal operating parameters.\"\n        ->  manipulate\n\n      & manipulate @hidden\n        ->  manipulationOfControl,\n            manipulationOfView\n\n      // Control related attack steps (Impact)\n      | manipulationOfControl {I, A}\n        user info: \"Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes.\"\n        developer info: \"MITRE ATT&CK ICS T831.\"\n        ->  restrictedOperation,\n            transmittedControlSignal.manipulateSignal,\n            sentData[IcsControlData].attemptWrite,\n            hostHardware[IcsHardware].manipulationOfControl,\n            hostHardware[IcsHardware].unsafeState\n\n      | lossOfControl {A}\n        user info: \"Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided.\"\n        developer info: \"MITRE ATT&CK ICS T827.\"\n        ->  restrictedOperation,\n            transmittedControlSignal.blockSignal,\n            sentData[IcsControlData].attemptDeny,\n            hostHardware[IcsHardware].lossOfControl,\n            hostHardware[IcsHardware].attemptPreemptiveShutdown\n\n      // View related attack steps (Impact)\n      | manipulationOfView {I, A}\n        user info: \"Adversaries may attempt to manipulate the information reported back to operators or controllers.\"\n        developer info: \"MITRE ATT&CK ICS T832.\"\n        ->  restrictedOperation,\n            transmittedSignal.manipulateSignal,\n            sentData[IcsData].attemptWrite,\n            hostHardware[IcsHardware].manipulationOfView,\n            hostHardware[IcsHardware].unsafeState\n\n      | lossOfView {A}\n        user info: \"Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention.\"\n        developer info: \"MITRE ATT&CK ICS T829.\"\n        ->  restrictedOperation,\n            transmittedSignal.blockSignal,\n            sentData[IcsData].attemptDeny,\n            hostHardware[IcsHardware].lossOfView,\n            hostHardware[IcsHardware].attemptPreemptiveShutdown\n\n      // Other types of Impact\n      | theftOfOperationalInformation {C}\n        user info: \"Adversaries may steal operational information on a production environment as a direct mission outcome for personal gain or to inform future operations.\"\n        developer info: \"MITRE ATT&CK ICS T882.\"\n\n    }\n\n    asset Sensor\n      user info: \"An object that generates data (via a signal) but may not have any associated software or host.\"\n      modeler info: \"It would be vulnerable to an attacker that can gain physical access to it.\"\n    {\n      | physicalAccess\n        user info: \"Attacker has physical access on the location where the sensor is physically deployed.\"\n        ->  signal.manipulateSignal,\n            signal.blockSignal,\n            data.attemptWrite,\n            data.attemptDeny,\n            system.lossOfView,\n            system.manipulationOfView\n    }\n\n    asset Actuator\n      user info: \"An object that consumes data (from a signal) but may not have any associated software or host.\"\n    {\n      | manipulate {I, A}\n        user info: \"If the signal that is consumed by this actuator is manipulated then the actuator is also manipulated.\"\n        developer info: \"This will lead to manipulation of control on the associated system.\"\n        ->  system.manipulationOfControl\n\n      | block {A}\n        user info: \"If the signal that is consumed by this actuator is blocked then the actuator is also blocked.\"\n        developer info: \"This will lead to loss of control and loss of availability on the associated system.\"\n        ->  system.lossOfControl\n    }\n\n    asset SynchronizationModule\n      user info: \"This asset represents any component that provides synchronization capabilities, as for example a GPS receiver or a network-based synchronization module.\"\n    {\n      | compromise\n        ->  manipulateClockFrequency,\n            manipulateTime,\n            stopClock\n\n      | manipulateClockFrequency\n        ->  synchronizedApp.manipulationOfControl,\n            synchronizedApp.manipulationOfView\n\n      | manipulateTime\n        ->  synchronizedApp.manipulationOfControl,\n            synchronizedApp.manipulationOfView\n\n      | stopClock\n        ->  synchronizedApp.lossOfControl,\n            synchronizedApp.lossOfView\n    }\n\n  }"}
{"instruction": "Given these related assets, write a category definition in Meta Attack Language.", "input": "**Data Resources Category:** This category encompasses various types of data and signals that are of interest during threat modeling.\n\n1. **Signal**: A signal is a piece of information transmitted between assets, regardless of the medium. If data is transmitted over a known medium, consider using IcsData or DataInTransit instead. The basic attack steps for Signal include attemptAccess, access, attemptRead, attemptWrite, and attemptDelete. If the data is encrypted, accessing it requires the associated encryption credentials/key. Authenticated data cannot be modified.\n\n2. **ControlSignal (extends Signal)**: A ControlSignal represents control commands sent between assets, much like a Signal, but for control purposes. The manipulation or blocking of ControlSignals can lead to manipulation or loss of control in the destination application.\n\n3. **IcsData (extends Data)**: IcsData is an extension of the coreLang's Data, with added OT attack vectors and directionality for non-control information. Successful write, delete, or deny actions on IcsData can result in manipulation or loss of view and control in the destination application.\n\n4. **IcsControlData (extends Data)**: IcsControlData is another extension of the coreLang's Data, this time for control information. Similar to IcsData, successful write, delete, or deny actions can result in manipulation or loss of control and view in the destination application.\n\nIn the MAL code, there are associations like DataInTransit, which represents the transmission of data over a known medium, and various attack steps such as encryptCreds, manipulationOfView, lossOfView, manipulationOfControl, and lossOfControl. These associations and attack steps are directly linked to the assets mentioned above.", "output": "category DataResources {\n\n    asset Signal\n      user info: \"A signal represents information that is sent between two assets but the medium over which is transmitted is not relevant to the model.\"\n      modeler info: \"In the case where data or information are transmitted over a known medium, the IcsData asset and the DataInTransit association should be used instead.\"\n      developer info: \"The basic attack steps of this asset were inspired by the attack steps of the data asset in coreLang.\"\n    {\n      // Basic attack steps below\n      | attemptAccess\n          user info: \"Attempt to access the data, this might fail if the 'dataNotPresent' defense is used.\"\n          ->  access\n\n        & access\n          user info: \"Access the data.\"\n          ->  attemptRead,\n              attemptWrite,\n              attemptDelete\n\n        !E dataEncrypted @hidden\n          user info: \"If the data are encrypted then accessing them requires the associated encryption credentials/key.\"\n          developer info: \"Data will be considered as encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is reached.\"\n          <-  encryptCreds\n          ->  accessUnencryptedData\n\n        # authenticated\n          user info: \"If the data are authenticated, then modifying them is not possible to achieve.\"\n          ->  write\n\n        & accessUnencryptedData\n          user info: \"If data is unencrypted then access them.\"\n          ->  accessDecryptedData\n\n        | accessDecryptedData @hidden\n          user info: \"Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled.\"\n          ->  access,\n              readContainedInformationAndData,\n              read,\n              write,\n              delete\n\n        # dataNotPresent\n          user info: \"It should be used to model the probability of data actually not existing on the connected container (i.e. System, Application, Connection, etc.).\"\n          developer info: \"This attack step is in series with the 'accessUnencryptedData' attack step because there is no reason to defend encrypted data if they do not exist...\"\n          ->  accessUnencryptedData\n\n        & readContainedInformationAndData\n          user info: \"From the data, attempt to access also the contained information/data, if exists.\"\n          ->  information.read,\n              containedData.read\n\n        | attemptRead\n          user info: \"Attempt to read the data.\"\n          ->  read\n\n        | attemptWrite\n          user info: \"Attempt to write on the data.\"\n          ->  write\n\n        | attemptDelete\n           user info: \"Attempt to delete the data.\"\n          -> delete\n\n        & read {C}\n          user info: \"The attacker can read the data.\"\n          ->  containedData.attemptRead,\n              readContainedInformationAndData\n\n        & write {I}\n          user info: \"The attacker can write to the location of the data, effectively deleting it.\"\n          ->  containedData.attemptWrite,\n              attemptDelete\n\n        & delete {I, A}\n          user info: \"The attacker can delete the data.\"\n          ->  containedData.attemptDelete\n\n        | manipulateSignal\n          user info: \"When an attacker sends a false or manipulated signal.\"\n          ->  signalDestApp.manipulationOfView\n\n        | blockSignal\n          user info: \"When an attacker blocks a signal from being sent/received.\"\n          ->  signalDestApp.lossOfView\n    }\n\n    asset ControlSignal extends Signal\n      user info: \"A ControlSignal represents control commands are sent between two assets but the medium over which is transmitted is not relevant to the model.\"\n      modeler info: \"In the case where control commands are transmitted over a known medium, the IcsControlData asset and the DataInTransit association should be used instead.\"\n    {\n        | manipulateSignal @Override\n          user info: \"When an attacker sends a false or manipulated signal.\"\n          ->  signalActuator.manipulate,\n              controlSignalDestApp.manipulationOfControl\n\n        | blockSignal @Override\n          user info: \"When an attacker blocks a signal from being sent/received.\"\n          ->  signalActuator.block,\n              controlSignalDestApp.lossOfControl\n    }\n\n    asset IcsData extends Data\n      user info: \"An ICS Data extends coreLang's Data with OT attack vectors and directionality for non-control information.\"\n      modeler info: \"This data represents the non-control information sent over the OT network\"\n    {\n        & successfulWrite  @Override {I}\n          user info: \"Modifying the data leads to a manipulation of view on the destination(s) and a manipulation of control on the source(s)\"\n          +>  receiverApp[IcsApplication].manipulationOfView\n\n        & successfulDelete @Override {I, A}\n          user info: \"Deleting the data leads to a loss of view on the destination(s) and a loss of control on the source(s)\"\n          +>  receiverApp[IcsApplication].lossOfView\n\n        & successfulDeny @Override {A}\n          user info: \"Denying access to the data leads to a loss of view on the destination(s) and a loss of control on the source(s)\"\n          +>  receiverApp[IcsApplication].lossOfView\n    }\n\n    asset IcsControlData extends Data\n      user info: \"An ICS Control Data extends coreLang's Data with OT attack vectors and directionality for control information.\"\n      modeler info: \"This data represents the control information sent over the OT network\"\n    {\n        & successfulWrite  @Override {I}\n          user info: \"Modifying the data leads to a manipulation of view on the destination(s) and a manipulation of control on the source(s)\"\n          +>  dataActuator.manipulate,\n              receiverApp[IcsApplication].manipulationOfControl\n\n        & successfulDelete @Override {I, A}\n          user info: \"Deleting the data leads to a loss of view on the destination(s) and a loss of control on the source(s)\"\n          +>  dataActuator.block,\n              receiverApp[IcsApplication].lossOfControl\n\n        & successfulDeny @Override {A}\n          user info: \"Denying access to the data leads to a loss of view on the destination(s) and a loss of control on the source(s)\"\n          +>  dataActuator.block,\n              receiverApp[IcsApplication].lossOfControl\n    }\n  }"}
{"instruction": "Generate a Meta Attack Language snippet that models the scenario described below.", "input": "In this threat modeling documentation, we're focusing on an Industrial Control System (ICS) hardware extension of the core language's System. This ICS hardware presents additional attack vectors due to its specific nature.\n\nAdversaries may target the modular hardware devices within the control system devices, attempting to install malicious or vulnerable firmware onto them (MITRE ATT&CK ICS T839). To mitigate this, consider verifying the module's firmware upon boot-up or during normal operation, using cryptography keys for firmware updates, or implementing authenticated firmware updates.\n\nThe system firmware is another target for attackers, who may exploit the firmware update feature on accessible devices to upload malicious or out-of-date firmware (MITRE ATT&CK ICS T857). In such cases, full access to the system can lead to safety, control, and availability losses, as well as manipulation of views and controls.\n\nThe ICS system may be connected to a Safety Instrumented System (SIS). If it is not, safety mechanisms should be disabled (sisConnected @hidden). This could potentially lead to damage to property if the safety mechanisms fail to shut down the system to prevent damage.\n\nIn terms of attack steps, adversaries may attempt preemptive shutdowns to disrupt the industrial process, either due to a loss of control or view, or due to concerns about a loss of safety (attemptPreemptiveShutdown @hidden). If the system is shut down, it can lead to a loss of availability, critical parent system propagation of critical shutdown, and propagation of redundant shutdown if all redundant subsystems experience a shutdown.\n\nAdditionally, adversaries may cause loss of safety, control, view, availability, productivity, and revenue through manipulation of control and view, as well as damage to property (lossOfSafety, lossOfControl, lossOfView, lossOfAvailability, lossOfProductivityAndRevenue, manipulationOfControl, manipulationOfView, damageToProperty).\n\nFor critical subsystems, attack steps can propagate critical shutdown, loss of control, loss of view, manipulation of control, manipulation of view, loss of availability, loss of productivity and revenue to the parent system if any of the critical subsystems experience these states. Similarly, for redundant subsystems, attack steps can propagate shutdown, loss of control, loss of view, manipulation of control, manipulation of view, loss of availability, loss of productivity and revenue to the parent system if all of the redundant subsystems experience these states.\n\nFinally, it's important to note that some IcsHardware may not always be present, so they should be accounted for when modeling potential threats.", "output": "asset IcsHardware extends Hardware\n      user info: \"An ICS System extends the coreLang's System with more attack vectors.\"\n      developer info: \"For example, the attacker can additionally peform ATT&CK ICS T847 'Replication Through Removable Media', T862 'Supply Chain Attack' and more.\"\n    {\n      | physicalAccess @Override\n        +>  moduleFirmware,\n            systemFirmware\n\n      | fullAccess @Override\n        +>  lossOfSafety,\n            lossOfControl,\n            lossOfAvailability,\n            manipulationOfView,\n            manipulationOfControl\n\n      & moduleFirmware\n        user info: \"Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices.\"\n        developer info: \"MITRE ATT&CK ICS T839.\"\n        ->  fullAccess\n\n      # moduleFirmwareVerification\n        user info: \"Verify the module's firmwares from the main firmware upon boot-up or during normal operation. Mitigation for MITRE ATT&CK ICS T839.\"\n        developer info: \"Mitigation was vaguely listed on MITRE ATT&CK ICS.\"\n        ->  moduleFirmware\n\n      # useCryptographyKeyForFirmware\n        user info: \"If a cryptographic key is used for firmware updates, the firmware will be harder to be altered. Mitigation for MITRE ATT&CK ICS T839 and T857.\"\n        developer info: \"Mitigation was listed on MITRE ATT&CK ICS.\"\n        ->  moduleFirmware,\n            systemFirmware\n\n      # useAuthenticatedFirmwareUpdates\n        user info: \"If authentication of the source and data is performed, malicious firmware alteration will be significantly harder. Mitigation for MITRE ATT&CK ICS T839 and T857.\"\n        developer info: \"Mitigation was listed on MITRE ATT&CK ICS.\"\n        ->  moduleFirmware,\n            systemFirmware\n\n      & systemFirmware\n        user info: \"An adversary may exploit the firmware update feature on accessible devices to upload malicious or out-of-date firmware.\"\n        developer info: \"MITRE ATT&CK ICS T857.\"\n        ->  fullAccess\n\n      | deny @Override {A}\n        +>  lossOfAvailability\n\n      !E sisConnected @hidden\n        developer info: \"If the ICS system is not connected to an SIS the safety mechanisms should be disabled\"\n        <-  sis\n        ->  safetyMechanismsOffline\n\n      // Impact attack steps\n      | attemptPreemptiveShutdown @hidden\n        user info: \"Intermediate attack step for modelling the possibility of detecting a disruption(loss of Control/View) and preemptively shutting down the system in order to prevent damage.\"\n        ->  attemptShutdown,\n            attemptUnsafeState\n\n      | attemptPreemptiveShutdownOnSafetyLoss @hidden\n        user info: \"Intermediate attack step for modelling the possibility of detecting a disruption(loss of Safety) and preemptively shutting down the system because of concerns. The loss of safety alone does not trigger either a shutdown or generate an unsafe state as control and view are expected to maintain the system operating within normal parameters.\"\n        ->  attemptShutdown\n\n      | attemptShutdown @hidden [Bernoulli(0.1)]\n        developer info: \"This is the actual preemptive shutdown operation. The specific probability should be researched more and maybe defined by the modeller.\"\n        ->  shutdown\n\n      | attemptUnsafeState @hidden [Bernoulli(0.1)]\n        developer info: \"This attack step models the possibility that a naturally occurring unsafe state is reached if there is a loss of control or view. The specific probability should be researched more and maybe defined by the modeller.\"\n        ->  unsafeState\n\n      | unsafeState @hidden\n        developer info: \"The system can only be damaged if it has reached an unsafe operating state. If the safety mechanisms are still functional the system will shutdown without taking damage, otherwise the damage done to the system will bring it down.\"\n        ->  damageToProperty,\n            shutdown\n\n      | lossOfSafety\n        user info: \"Adversaries may cause loss of safety whether on purpose or as a consequence of actions taken to accomplish an operation.\"\n        developer info: \"MITRE ATT&CK ICS T880.\"\n        ->  safetyMechanismsOffline,\n            attemptPreemptiveShutdownOnSafetyLoss\n\n      | safetyMechanismsOffline @hidden\n        user info: \"Physical assets should only be damaged if the safety mechanisms fail to shutdown the system to prevent damage\"\n        ->  damageToProperty\n\n      | shutdown {A}\n        user info: \"Shutdown the system. Can be initiated by the attacker intentionally to disrupt the industrial process or unintentionally by tampering with system and accidentally triggering the safety shutdown procedures. If the staff detect anomalous behaviour and they can decide to preemptively shut the system down to prevent potential damage.\"\n        ->  lossOfAvailability,\n            criticalParentSystem.propagateCriticalShutdown,\n            triggerPropagateRedundantShutdown\n\n      | triggerPropagateRedundantShutdown @hidden\n        developer info: \"This is an intermediary step required for the situation where SIS redundant subsystems are disabled.\"\n        ->  redundantParentSystem.propagateRedundantShutdown\n\n      & damageToProperty {I, A}\n        user info: \"Adversaries may cause damage and destruction of property to infrastructure, equipment, and the surrounding environment when attacking control systems.\"\n        developer info: \"MITRE ATT&CK ICS T879.\"\n        ->  shutdown,\n            lossOfProductivityAndRevenue\n\n      | lossOfControl {A}\n        user info: \"Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided.\"\n        developer info: \"MITRE ATT&CK ICS T827.\"\n        ->  attemptPreemptiveShutdown,\n            criticalParentSystem.propagateCriticalLossOfControl,\n            redundantParentSystem.propagateRedundantLossOfControl\n\n      | lossOfView {A}\n        user info: \"Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention.\"\n        developer info: \"MITRE ATT&CK ICS T829.\"\n        ->  attemptPreemptiveShutdown,\n            criticalParentSystem.propagateCriticalLossOfView,\n            redundantParentSystem.propagateRedundantLossOfView\n\n      | lossOfAvailability {A}\n        user info: \"Adversaries may attempt to disrupt essential components or systems to prevent owner and operator from delivering products or services.\"\n        developer info: \"MITRE ATT&CK ICS T826.\"\n        ->  lossOfProductivityAndRevenue,\n            criticalParentSystem.propagateCriticalLossOfAvailability,\n            redundantParentSystem.propagateRedundantLossOfAvailability\n\n      | lossOfProductivityAndRevenue\n        user info: \"Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes.\"\n        developer info: \"MITRE ATT&CK ICS T828.\"\n        ->  criticalParentSystem.propagateCriticalLossOfProductivityAndRevenue,\n            redundantParentSystem.propagateRedundantLossOfProductivityAndRevenue\n\n      | manipulationOfControl {I, A}\n        user info: \"Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes.\"\n        developer info: \"MITRE ATT&CK ICS T831.\"\n        ->  unsafeState,\n            criticalParentSystem.propagateCriticalManipulationOfControl,\n            redundantParentSystem.propagateRedundantManipulationOfControl\n\n      | manipulationOfView {I, A}\n        user info: \"Adversaries may attempt to manipulate the information reported back to operators or controllers.\"\n        developer info: \"MITRE ATT&CK ICS T832.\"\n        ->  unsafeState,\n            criticalParentSystem.propagateCriticalManipulationOfView,\n            redundantParentSystem.propagateRedundantManipulationOfView\n\n      // Propagate subsystems attack steps\n      // Critical subsystems\n      | propagateCriticalShutdown @hidden\n        user info: \"Propagate shutdown to the parent system if any of the critical subsystems experience a shutdown\"\n        -> shutdown\n\n      | propagateCriticalLossOfControl @hidden\n        user info: \"Propagate loss of control to the parent system if any of the critical subsystems experience a loss of control\"\n        -> lossOfControl\n\n      | propagateCriticalLossOfView @hidden\n        user info: \"Propagate loss of view to the parent system if any of the critical subsystems experience a loss of view\"\n        -> lossOfView\n\n      | propagateCriticalManipulationOfControl @hidden\n        user info: \"Propagate manipulation of control to the parent system if any of the critical subsystems experience a manipulation of control\"\n        -> manipulationOfControl\n\n      | propagateCriticalManipulationOfView @hidden\n        user info: \"Propagate manipulation of view to the parent system if any of the critical subsystems experience a manipulation of view\"\n        -> manipulationOfView\n\n      | propagateCriticalLossOfAvailability @hidden\n        user info: \"Propagate loss of availability to the parent system if any of the critical subsystems experience a loss of availability\"\n        -> lossOfAvailability\n\n      | propagateCriticalLossOfProductivityAndRevenue @hidden\n        user info: \"Propagate loss of productivity and revenue to the parent system if any of the critical subsystems experience a loss of productivity and revenue\"\n        -> lossOfProductivityAndRevenue\n\n      // Redundant subsystems\n      & propagateRedundantShutdown @hidden\n        user info: \"Propagate shutdown to the parent system if all of the redundant subsystems experience a shutdown\"\n        -> shutdown\n\n      & propagateRedundantLossOfControl @hidden\n        user info: \"Propagate loss of control to the parent system if all of the redundant subsystems experience a loss of control\"\n        -> lossOfControl\n\n      & propagateRedundantLossOfView @hidden\n        user info: \"Propagate loss of view to the parent system if all of the redundant subsystems experience a loss of view\"\n        -> lossOfView\n\n      & propagateRedundantManipulationOfControl @hidden\n        user info: \"Propagate manipulation of control to the parent system if all of the redundant subsystems experience a manipulation of control\"\n        -> manipulationOfControl\n\n      & propagateRedundantManipulationOfView @hidden\n        user info: \"Propagate manipulation of view to the parent system if all of the redundant subsystems experience a manipulation of view\"\n        -> manipulationOfView\n\n      & propagateRedundantLossOfAvailability @hidden\n        user info: \"Propagate loss of availability to the parent system if all of the redundant subsystems experience a loss of availability\"\n        -> lossOfAvailability\n\n      & propagateRedundantLossOfProductivityAndRevenue @hidden\n        user info: \"Propagate loss of productivity and revenue to the parent system if all of the redundant subsystems experience a loss of productivity and revenue\"\n        -> lossOfProductivityAndRevenue\n\n      # notDisabled [Enabled]\n        developer info: \"The probability that a particular IcsHardware is not actually present.\"\n        modeler info: \"The use case for this is removing some of the IcsHardwares used to provide redundancy.\"\n        -> lossOfControl,\n           lossOfView,\n           lossOfAvailability,\n           lossOfProductivityAndRevenue,\n           manipulationOfControl,\n           manipulationOfView,\n           shutdown\n\n    }"}
{"instruction": "Use Meta Attack Language to capture the steps described here.", "input": "In the realm of our industrial control system (ICS), we have an IcsApplication, an extension of the core system's Application. This ICS Application introduces additional attack vectors specific to operational technology (OT) environments.\n\nThe IcsApplication has several access privileges, including specificAccess and fullAccess, which grant varying levels of control over the operational component. With fullAccess, an adversary not only controls the system normally but can also attempt manipulation, deviating from the system's intended operation.\n\nIn its normalOperation state, the system may still be covertly manipulated without raising immediate suspicion. This is a potential concern, as an adversary could act undetectably within the system's safety limits.\n\nCompromised IcsApplications may experience restrictedOperation, where the system's operation is affected in some way. This could manifest as a loss of control or loss of view, making it difficult for operators to issue commands or monitor the system's status, respectively.\n\nData-related attacks are also possible with the IcsApplication. For instance, an adversary may attempt to read sensitive operational information or deny access to the system, causing a loss of view. Additionally, there's a risk of theft of operational information, which could be exploited for personal gain or used to inform future operations.\n\nLastly, there's the potential for manipulation of control and view within the system. Manipulation of control involves manipulating control systems devices or leveraging external devices to command physical processes. Manipulation of view, on the other hand, involves altering the information reported back to operators or controllers. Both can lead to restricted operation and unsafe states within the IcsHardware.", "output": "asset IcsApplication extends Application\n      user info: \"An ICS Application extends the coreLang's Application with OT attack vectors.\"\n    {\n      | specificAccess @Override\n        +>  normalOperation\n\n      | fullAccess @Override\n        +>  normalOperation,\n            attemptManipulation\n\n      | normalOperation\n        user info: \"The state where the operational component is operating normally or seems to be operating normally (but is undetectably manipulated within the safety limits).\"\n        developer info: \"I am not sure if we need this. But I keep it to add one more vector that we can model! (Sotirios)\"\n        ->  attemptCovertManipulation\n\n      | restrictedOperation {I,A}\n        user info: \"When the operational component is compromised, the operation of it is affected.\"\n\n      | read @Override {C}\n        +>  theftOfOperationalInformation\n\n      | deny @Override {A}\n        +>  lossOfControl,\n            lossOfView,\n            hostHardware[IcsHardware].lossOfAvailability\n\n      & attemptCovertManipulation [HardAndUncertain]\n        user info: \"If an application is operating normally it could even be the case that it is elaborately manipulated by an adversary.\"\n        ->  attemptManipulation\n\n      | attemptManipulation\n        user info: \"The adversary is actively manipulating the system outside of normal operating parameters.\"\n        ->  manipulate\n\n      & manipulate @hidden\n        ->  manipulationOfControl,\n            manipulationOfView\n\n      // Control related attack steps (Impact)\n      | manipulationOfControl {I, A}\n        user info: \"Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes.\"\n        developer info: \"MITRE ATT&CK ICS T831.\"\n        ->  restrictedOperation,\n            transmittedControlSignal.manipulateSignal,\n            sentData[IcsControlData].attemptWrite,\n            hostHardware[IcsHardware].manipulationOfControl,\n            hostHardware[IcsHardware].unsafeState\n\n      | lossOfControl {A}\n        user info: \"Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided.\"\n        developer info: \"MITRE ATT&CK ICS T827.\"\n        ->  restrictedOperation,\n            transmittedControlSignal.blockSignal,\n            sentData[IcsControlData].attemptDeny,\n            hostHardware[IcsHardware].lossOfControl,\n            hostHardware[IcsHardware].attemptPreemptiveShutdown\n\n      // View related attack steps (Impact)\n      | manipulationOfView {I, A}\n        user info: \"Adversaries may attempt to manipulate the information reported back to operators or controllers.\"\n        developer info: \"MITRE ATT&CK ICS T832.\"\n        ->  restrictedOperation,\n            transmittedSignal.manipulateSignal,\n            sentData[IcsData].attemptWrite,\n            hostHardware[IcsHardware].manipulationOfView,\n            hostHardware[IcsHardware].unsafeState\n\n      | lossOfView {A}\n        user info: \"Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention.\"\n        developer info: \"MITRE ATT&CK ICS T829.\"\n        ->  restrictedOperation,\n            transmittedSignal.blockSignal,\n            sentData[IcsData].attemptDeny,\n            hostHardware[IcsHardware].lossOfView,\n            hostHardware[IcsHardware].attemptPreemptiveShutdown\n\n      // Other types of Impact\n      | theftOfOperationalInformation {C}\n        user info: \"Adversaries may steal operational information on a production environment as a direct mission outcome for personal gain or to inform future operations.\"\n        developer info: \"MITRE ATT&CK ICS T882.\"\n\n    }"}
{"instruction": "Use Meta Attack Language to capture the steps described here.", "input": "In the course of our system evaluation, we've identified a critical component: a Sensor. This asset doesn't necessarily rely on software or a host system to function, but it does produce valuable data via a signal.\n\nThe Sensor, being a physical device, is potentially vulnerable to an attacker who manages to gain physical access to its deployment location. This could enable the attacker to manipulate the sensor's signal, block its signal transmission, attempt to write or alter the data it produces, or even deny the data altogether. In some extreme cases, an attacker might even manipulate or obstruct the view of the sensor, compromising the system's overall integrity.\n\nIt's essential to secure the physical environment surrounding the Sensor to prevent unauthorized access and maintain the integrity of the data it generates.", "output": "asset Sensor\n      user info: \"An object that generates data (via a signal) but may not have any associated software or host.\"\n      modeler info: \"It would be vulnerable to an attacker that can gain physical access to it.\"\n    {\n      | physicalAccess\n        user info: \"Attacker has physical access on the location where the sensor is physically deployed.\"\n        ->  signal.manipulateSignal,\n            signal.blockSignal,\n            data.attemptWrite,\n            data.attemptDeny,\n            system.lossOfView,\n            system.manipulationOfView\n    }"}
{"instruction": "Represent the attack behavior below in your custom Meta Attack Language.", "input": "In the course of our system analysis, we've identified a crucial component known as the Actuator. This device consumes signals and, unlike other components, may not be software-based or hosted.\n\nThe Actuator has two significant attributes: manipulation and blocking. If a signal consumed by the Actuator is manipulated, it implies manipulation of the control over the associated system. This could potentially lead to undesirable actions or behavior.\n\nConversely, if the signal consumed by the Actuator is blocked, it results in a loss of control over the associated system, causing a loss of availability.\n\nIn essence, the Actuator plays a pivotal role in the system, as its manipulation or blocking can significantly impact the overall system's control and availability. It's essential to monitor and secure this component to mitigate potential threats.", "output": "asset Actuator\n      user info: \"An object that consumes data (from a signal) but may not have any associated software or host.\"\n    {\n      | manipulate {I, A}\n        user info: \"If the signal that is consumed by this actuator is manipulated then the actuator is also manipulated.\"\n        developer info: \"This will lead to manipulation of control on the associated system.\"\n        ->  system.manipulationOfControl\n\n      | block {A}\n        user info: \"If the signal that is consumed by this actuator is blocked then the actuator is also blocked.\"\n        developer info: \"This will lead to loss of control and loss of availability on the associated system.\"\n        ->  system.lossOfControl\n    }"}
{"instruction": "Given this cyber incident, write its equivalent representation in Meta Attack Language.", "input": "During a recent system evaluation, we encountered an asset of interest - the SynchronizationModule. This component serves a crucial role in the system, providing synchronization capabilities, such as a GPS receiver or a network-based sync module.\n\nThe SynchronizationModule has several associated vulnerabilities:\n\n- Compromise of the SynchronizationModule can lead to a series of potential attacks. For instance, an attacker might seek to manipulate the clock frequency, manipulate the time, or even stop the clock altogether.\n\n  - Manipulating the clock frequency could potentially impact the control or view of applications that depend on this module for synchronization.\n\n  - Similarly, manipulating the time could also affect the control and view of these synchronized applications.\n\n  - Stopping the clock would lead to a loss of control and visibility for these applications, rendering them inoperable.\n\nIn essence, the SynchronizationModule is a critical component that, if compromised, could disrupt the functionality of various applications that rely on its synchronization capabilities. It's essential to ensure the security of this asset to maintain the overall system's integrity.", "output": "asset SynchronizationModule\n      user info: \"This asset represents any component that provides synchronization capabilities, as for example a GPS receiver or a network-based synchronization module.\"\n    {\n      | compromise\n        ->  manipulateClockFrequency,\n            manipulateTime,\n            stopClock\n\n      | manipulateClockFrequency\n        ->  synchronizedApp.manipulationOfControl,\n            synchronizedApp.manipulationOfView\n\n      | manipulateTime\n        ->  synchronizedApp.manipulationOfControl,\n            synchronizedApp.manipulationOfView\n\n      | stopClock\n        ->  synchronizedApp.lossOfControl,\n            synchronizedApp.lossOfView\n    }"}
{"instruction": "Given this cyber incident, write its equivalent representation in Meta Attack Language.", "input": "In the course of a security assessment, we encountered an asset referred to as 'Signal'. This asset represents information that is transmitted between two assets, disregarding the medium through which it's sent. In cases where data transmission occurs over a known medium, the IcsData asset and the DataInTransit association should be utilized instead.\n\nDuring our analysis, we identified several potential attack steps related to the Signal asset. One such step involves attempting to access the data, which might fail if the 'dataNotPresent' defense is employed. If successful, the data can then be accessed, leading to further actions such as reading, writing, or deleting.\n\nInterestingly, if the data is encrypted, accessing them requires the associated encryption credentials or key. Data will be considered as encrypted if there is at least one Credentials instance associated with it. If the data is authenticated, however, modifying it becomes impossible.\n\nIn the event that data is unencrypted, accessing it leads to another intermediate attack step, 'accessDecryptedData'. This step allows the effects of 'accessUnencryptedData' on data after the encryption credentials have been compromised or encryption is disabled.\n\nIt's also worth noting that if data is not present on the connected container, the 'dataNotPresent' attack step should be used to model the probability of the data not existing. This attack step is in series with the 'accessUnencryptedData' attack step because there's no reason to defend encrypted data if it does not exist.\n\nFurthermore, we observed that from the data, the attacker can attempt to access also the contained information/data, if it exists. Additionally, the attacker can manipulate a signal by sending a false or manipulated signal, or block a signal from being sent/received.\n\nThese attack steps were inspired by the attack steps of the data asset in coreLang, providing a foundation for understanding the potential threats associated with the Signal asset.", "output": "asset Signal\n      user info: \"A signal represents information that is sent between two assets but the medium over which is transmitted is not relevant to the model.\"\n      modeler info: \"In the case where data or information are transmitted over a known medium, the IcsData asset and the DataInTransit association should be used instead.\"\n      developer info: \"The basic attack steps of this asset were inspired by the attack steps of the data asset in coreLang.\"\n    {\n      // Basic attack steps below\n      | attemptAccess\n          user info: \"Attempt to access the data, this might fail if the 'dataNotPresent' defense is used.\"\n          ->  access\n\n        & access\n          user info: \"Access the data.\"\n          ->  attemptRead,\n              attemptWrite,\n              attemptDelete\n\n        !E dataEncrypted @hidden\n          user info: \"If the data are encrypted then accessing them requires the associated encryption credentials/key.\"\n          developer info: \"Data will be considered as encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is reached.\"\n          <-  encryptCreds\n          ->  accessUnencryptedData\n\n        # authenticated\n          user info: \"If the data are authenticated, then modifying them is not possible to achieve.\"\n          ->  write\n\n        & accessUnencryptedData\n          user info: \"If data is unencrypted then access them.\"\n          ->  accessDecryptedData\n\n        | accessDecryptedData @hidden\n          user info: \"Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled.\"\n          ->  access,\n              readContainedInformationAndData,\n              read,\n              write,\n              delete\n\n        # dataNotPresent\n          user info: \"It should be used to model the probability of data actually not existing on the connected container (i.e. System, Application, Connection, etc.).\"\n          developer info: \"This attack step is in series with the 'accessUnencryptedData' attack step because there is no reason to defend encrypted data if they do not exist...\"\n          ->  accessUnencryptedData\n\n        & readContainedInformationAndData\n          user info: \"From the data, attempt to access also the contained information/data, if exists.\"\n          ->  information.read,\n              containedData.read\n\n        | attemptRead\n          user info: \"Attempt to read the data.\"\n          ->  read\n\n        | attemptWrite\n          user info: \"Attempt to write on the data.\"\n          ->  write\n\n        | attemptDelete\n           user info: \"Attempt to delete the data.\"\n          -> delete\n\n        & read {C}\n          user info: \"The attacker can read the data.\"\n          ->  containedData.attemptRead,\n              readContainedInformationAndData\n\n        & write {I}\n          user info: \"The attacker can write to the location of the data, effectively deleting it.\"\n          ->  containedData.attemptWrite,\n              attemptDelete\n\n        & delete {I, A}\n          user info: \"The attacker can delete the data.\"\n          ->  containedData.attemptDelete\n\n        | manipulateSignal\n          user info: \"When an attacker sends a false or manipulated signal.\"\n          ->  signalDestApp.manipulationOfView\n\n        | blockSignal\n          user info: \"When an attacker blocks a signal from being sent/received.\"\n          ->  signalDestApp.lossOfView\n    }"}
{"instruction": "Convert the following cyber-attack description into Meta Attack Language code.", "input": "In the course of our system analysis, we've identified a component known as ControlSignal, a specialized type of Signal that carries control commands between assets. This ControlSignal, though, does not concern itself with the specific medium through which these commands are transmitted. In situations where control commands are indeed transmitted over a defined medium, it's recommended to utilize the IcsControlData asset and the DataInTransit association instead.\n\nWhen an adversary decides to interfere with the ControlSignal, they might send a falsified or manipulated signal through the manipulateSignal function, which in turn affects the manipulation of the control system at the destination application (controlSignalDestApp). Conversely, an attacker can also block the signal from being sent or received, causing a loss of control at the controlSignalDestApp. These malicious actions can have detrimental effects on the system's overall functionality.", "output": "asset ControlSignal extends Signal\n      user info: \"A ControlSignal represents control commands are sent between two assets but the medium over which is transmitted is not relevant to the model.\"\n      modeler info: \"In the case where control commands are transmitted over a known medium, the IcsControlData asset and the DataInTransit association should be used instead.\"\n    {\n        | manipulateSignal @Override\n          user info: \"When an attacker sends a false or manipulated signal.\"\n          ->  signalActuator.manipulate,\n              controlSignalDestApp.manipulationOfControl\n\n        | blockSignal @Override\n          user info: \"When an attacker blocks a signal from being sent/received.\"\n          ->  signalActuator.block,\n              controlSignalDestApp.lossOfControl\n    }"}
{"instruction": "Model this cybersecurity attack using Meta Attack Language syntax.", "input": "In the context of our system architecture, the IcsData asset is an extension of the core Data class, specifically designed to accommodate OT (Operational Technology) network attack vectors and to account for the directionality of non-control information. This data represents the data packets exchanged over the OT network in an Industrial Control System (ICS) environment.\n\nWhen the successfulWrite operation is executed on the IcsData asset, it triggers a manipulation of the view on the recipient application (IcsApplication) and a manipulation of control on the sender. In simpler terms, this means that any modification to the data can potentially alter the perceived state of the recipient application and even affect the control flow of the sender.\n\nIf the successfulDelete operation is performed on the IcsData asset, it results in a loss of view on the recipient application and a loss of control on the sender. This implies that the deletion of the data can lead to the recipient application not being able to see the correct state of the data, and the sender might also experience control issues due to the absence of the data.\n\nSimilarly, when the successfulDeny operation is executed on the IcsData asset, it denies access to the data, leading to a loss of view on the recipient application and a loss of control on the sender. In this case, the recipient application cannot view the data, and the sender might have control issues due to the data being unavailable.\n\nThese operations are linked to the IcsApplication through associations, implying that the state of the IcsData asset directly impacts the IcsApplication in various ways, depending on the operation executed.", "output": "asset IcsData extends Data\n      user info: \"An ICS Data extends coreLang's Data with OT attack vectors and directionality for non-control information.\"\n      modeler info: \"This data represents the non-control information sent over the OT network\"\n    {\n        & successfulWrite  @Override {I}\n          user info: \"Modifying the data leads to a manipulation of view on the destination(s) and a manipulation of control on the source(s)\"\n          +>  receiverApp[IcsApplication].manipulationOfView\n\n        & successfulDelete @Override {I, A}\n          user info: \"Deleting the data leads to a loss of view on the destination(s) and a loss of control on the source(s)\"\n          +>  receiverApp[IcsApplication].lossOfView\n\n        & successfulDeny @Override {A}\n          user info: \"Denying access to the data leads to a loss of view on the destination(s) and a loss of control on the source(s)\"\n          +>  receiverApp[IcsApplication].lossOfView\n    }"}
{"instruction": "Represent the attack behavior below in your custom Meta Attack Language.", "input": "In the course of assessing our industrial control system (ICS), we've identified a critical data entity: IcsControlData. This data entity is an extension of the core Data class, incorporating Operational Technology (OT) attack vectors and directionality specific to control information exchanged within the system.\n\nIn essence, IcsControlData represents the control information flowing through the OT network. It's worth noting that this data can be subject to manipulation, deletion, or denial of access, each of which can have significant ramifications for the integrity of our ICS.\n\nWhen the IcsControlData undergoes a successful write operation, it results in a manipulation of the view on the destination(s) and a manipulation of control on the source(s). This can be traced back to two associated actions: dataActuator's manipulate function and the manipulation of control by the IcsApplication at the receiver end.\n\nSimilarly, a successful delete operation on IcsControlData leads to a loss of view on the destination(s) and a loss of control on the source(s). This is linked to the dataActuator's block function and the loss of control experienced by the IcsApplication.\n\nLastly, denying access to IcsControlData can also lead to a loss of view on the destination(s) and a loss of control on the source(s). This is again associated with the dataActuator's block function and the loss of control experienced by the IcsApplication.\n\nIt's crucial to monitor and secure these critical control data entities to maintain the overall health and security of our ICS.", "output": "asset IcsControlData extends Data\n      user info: \"An ICS Control Data extends coreLang's Data with OT attack vectors and directionality for control information.\"\n      modeler info: \"This data represents the control information sent over the OT network\"\n    {\n        & successfulWrite  @Override {I}\n          user info: \"Modifying the data leads to a manipulation of view on the destination(s) and a manipulation of control on the source(s)\"\n          +>  dataActuator.manipulate,\n              receiverApp[IcsApplication].manipulationOfControl\n\n        & successfulDelete @Override {I, A}\n          user info: \"Deleting the data leads to a loss of view on the destination(s) and a loss of control on the source(s)\"\n          +>  dataActuator.block,\n              receiverApp[IcsApplication].lossOfControl\n\n        & successfulDeny @Override {A}\n          user info: \"Denying access to the data leads to a loss of view on the destination(s) and a loss of control on the source(s)\"\n          +>  dataActuator.block,\n              receiverApp[IcsApplication].lossOfControl\n    }"}
{"instruction": "Model the connection described below as an association in Meta Attack Language.", "input": "In this system, we have several components that interact with one another, primarily focusing on Industrial Control Systems (ICS). These components include IcsHardware, IcsApplications, Sensors, and Actuators.\n\nIcsHardware can be critical or redundant subsystems within a larger system. Critical subsystems will propagate disruptions to their parent system if any of the subsystems are affected. Redundant subsystems, on the other hand, will only trigger disruptions in the parent system if all of the redundant subsystems are impacted. Additionally, an IcsHardware can have a safety system (SIS) assigned to it to ensure safe operation.\n\nIcsApplications can transmit, receive, or control signals. Transmitted signals can originate from any IcsApplication, while received signals can be consumed by any IcsApplication. Similarly, transmitted control signals and received control signals are also handled by IcsApplications.\n\nSensors can send data associated with a signal, be associated with data they send, or be linked with a specific IcsHardware system where they measure parameters. Actuators, on the other hand, can be associated with signals that contain commands, data containing commands, or a specific IcsHardware system on which they actuate.\n\nActuators and Sensors can also be synchronized through the use of a SynchronizationModule associated with an IcsApplication. Encrypted signals can be associated with relevant encryption credentials, and signals can contain data or information.\n\nEach of these components plays a crucial role in the overall functionality and security of the ICS system, and understanding their relationships is key to ensuring a secure and reliable operation.", "output": "associations {\n  IcsHardware [criticalParentSystem]     0..1 <-- CriticalSubsystem           --> *     [criticalSubsystems]     IcsHardware\n      user info: \"IcsHardwares can be nested, a disruption in any of the critical subsystems will be triggered in the parent system as well.\"\n  IcsHardware [redundantParentSystem]    0..1 <-- RedundantSubsystem          --> *     [redundantSubsystems]    IcsHardware\n      user info: \"IcsHardwares can be nested, a disruption will propagate to the parent system only if all of the redundant subsystems are affected by it.\"\n  IcsHardware    [safeguardedSystem]     0..1 <-- SafetyControls              --> 0..1  [sis]            SIS\n      user info: \"An IcsHardware can have an SIS assigned to it to ensure that it is operating within safe parameters and act if it is not.\"\n  IcsApplication [signalSourceApp]        * <-- AppTransmittedSignal        --> *     [transmittedSignal] Signal\n      user info: \"Any ics application can transmit a signal.\"\n  IcsApplication [signalDestApp]          * <-- AppReceivedSignal           --> *     [receivedSignal] Signal\n      user info: \"Any ics application can receive/consume a signal.\"\n  IcsApplication [controlSignalSourceApp] * <-- AppTransmittedControlSignal --> *     [transmittedControlSignal] ControlSignal\n      user info: \"Any ics application can transmit a signal.\"\n  IcsApplication [controlSignalDestApp]   * <-- AppReceivedControlSignal    --> *     [receivedControlSignal] ControlSignal\n      user info: \"Any ics application can receive/consume a signal.\"\n  Sensor         [signalSensor]          * <-- SensorSignal                 --> *     [signal]         Signal\n      user info: \"Any sensor can be associated with a signal over which it can send data.\"\n  Sensor         [dataSensor]            * <-- SensorData                   --> *     [data]           IcsData\n      user info: \"Any sensor can be associated with data it sends.\"\n  Sensor         [sysSensor]             * <-- SensorBelongsTo              --> *     [system]         IcsHardware\n      user info: \"A sensor can be associated with a system where it measures a specific parameter.\"\n  Actuator       [signalActuator]        * <-- ActuatorSignal               --> *     [signal]         ControlSignal\n      user info: \"An actuator can be associated with a signal from which it receives commands.\"\n  Actuator       [dataActuator]          * <-- ActuatorData                 --> *     [data]           IcsControlData\n      user info: \"An actuator can be associated with data that contain commands.\"\n  Actuator       [sysActuator]           * <-- AcuatorBelongsTo             --> *     [system]         IcsHardware\n      user info: \"An actuator can be associated with a system on which it actuates.\"\n  IcsApplication [synchronizedApp]       * <-- SynchronizationModule        --> 0..1  [synchronizationModule]    SynchronizationModule\n      user info: \"Any ics application can have one synchronization module to provide synchronization on the signals sent.\"\n  Signal         [encryptedSignal]       * <-- EncryptionCredentials        --> 0..1  [encryptCreds]   Credentials\n      user info: \"Encrypted signal can be associated with the relevant encryption credentials.\"\n  Signal         [containerSignal]       * <-- DataContainment              --> *     [containedData]  Data\n      user info: \"Data can be contained inside a signal.\"\n  Signal         [containerSignal]       * <-- InfoContainment              --> *     [information]    Information\n      user info: \"A signal can contain information.\"\n}"}
