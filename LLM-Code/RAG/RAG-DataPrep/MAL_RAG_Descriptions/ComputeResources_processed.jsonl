{"input": "This MAL code defines a category named `ComputeResources` that models various assets and their associated components, attack steps, defenses, and relationships in a cybersecurity threat modeling context. The assets defined in this category include `Hardware`, `SoftwareProduct`, `Application`, `IDPS`, and `PhysicalZone`.\n\n1. **Hardware**: Specifies the hardware on which applications can run. It includes various attack steps such as `attemptUseVulnerabilityFromPhysicalAccess`, `attemptSpreadWormThroughRemovableMedia`, and `physicalAccess`. These attack steps can be used to exploit hardware vulnerabilities, spread malware, or gain physical access to the hardware. Defenses such as `hardwareModificationsProtection` are also defined to protect against unauthorized modifications to the hardware.\n\n2. **SoftwareProduct**: Represents a software package that certain applications are using, which can be associated with specific vulnerabilities or compromised during a software supply chain attack. Attack steps such as `compromiseApplications`, `readApplications`, `modifyApplications`, and `denyApplications` are defined to exploit the vulnerabilities associated with the software product, while defenses such as `notPresent` can be used to model the possibility that the software product does not exist.\n\n3. **Application**: Models any type of software process or component, from firmware and operating systems to plugins and sessions. It includes various attack steps such as `useVulnerability`, `attemptReverseReach`, `localConnect`, and `networkConnect`, which can be used to exploit vulnerabilities, gain access to networks and connections, or authenticate with the application. Defenses such as `notPresent` can also be used to model the possibility that the application does not exist.\n\n4. **IDPS**: Represents an Intrusion Detection and Prevention System (IDPS) that is tasked with protecting other applications from malicious activity. It includes the defense `effectiveness`, which represents how capable the IDPS is to prevent disruptions from occurring on the associated applications, and the defense `effectivenessBypassed`, which represents when the protection of the IDPS has been bypassed.\n\n5. **PhysicalZone**: Represents the location where hardware systems and networks are physically deployed. It includes the attack step `gainPhysicalAccess`, which can be used to gain physical access to the housed hardware and networks.\n\nThe associations section defines the relationships between the assets. For example, an application can be hosted on hardware, protected by an IDPS, associated with a software product, and deployed in a physical zone. Access on a physical zone provides physical access to the deployed hardware and networks, but access to the hardware or network does not provide access to the physical zone.", "output": "#id: \"org.mal_lang.ConputerResourceslang\"\n#version: \"1.0.0\"\n\ncategory ComputeResources {\n\n    asset Hardware\n      user info: \"Specifies the hardware on which applications can run.\"\n    {\n      | attemptUseVulnerabilityFromPhysicalAccess @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUseVulnerabilityFromPhysicalAccess,\n            bypassHardwareModificationsProtection\n\n      & successfulUseVulnerabilityFromPhysicalAccess @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  useVulnerability\n\n      | attemptUseVulnerabilityFromSoftwareFullAccess @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  useVulnerability\n\n      | useVulnerability\n        user info: \"The attacker is able to use the associated vulnerabilities, usually as a result of obtaining physical access.\"\n        ->  vulnerabilities.attemptAbuse\n\n      | attemptSpreadWormThroughRemovableMedia @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulSpreadWormThroughRemovableMedia,\n            bypassHardwareModificationsProtection\n\n      & successfulSpreadWormThroughRemovableMedia @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  spreadWormThroughRemovableMedia\n\n      | spreadWormThroughRemovableMedia @hidden\n        developer info: \"Try to spread malware through removable media that the users connect to the hardware system.\"\n        ->  (users \\/ physicalZones.users).attemptDeliverMaliciousRemovableMedia\n\n      | fullAccess {C,I,A}\n        user info: \"Full access on a piece of hardware grants full access on the applications running on it and access to the hosted data.\"\n        ->  sysExecutedApps.fullAccess,\n            hostedData.attemptRead,\n            hostedData.attemptWrite,\n            deny,\n            attemptSpreadWormThroughRemovableMedia\n\n      | attemptSupplyChainAttack @entrypoint\n        user info: \"Adversaries may perform supply chain compromise attacks to gain control of hardware before it is put into use.\"\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        modeler info: \"Triggering this attack step is the only way to model hardware supply chain attacks in the language, therefore scenarios interested in those aspects need to employ it as an entry point.\"\n        ->  successfulSupplyChainAttack,\n            bypassSupplyChainAuditing\n\n      & successfulSupplyChainAttack @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        -> supplyChainAttack\n\n      | supplyChainAttack [VeryHardAndUncertain]\n        user info: \"A supply chain compromise means that the attacker has gained full access of the hardware.\"\n        modeler info: \"The Hardware supply chain attack represents an attacker being able to tamper with the hardware/firmware before the deployment of the product and not alterations made to the hardware/firmware once it is operating.\"\n        ->  fullAccess\n\n      # supplyChainAuditing\n        user info: \"Auditing inside the hardware supply chain can detect possible supply chain attacks.\"\n        ->  supplyChainAuditingBypassed\n\n      | bypassSupplyChainAuditing [VeryHardAndUncertain]\n        user info: \"Supply chain auditing can be bypassed.\"\n        ->  supplyChainAuditingBypassed\n\n      | supplyChainAuditingBypassed @hidden\n        developer info: \"Supply chain auditing is bypassed either because it was not set or the attacker was able to circumvent it through additional effort.\"\n        ->  successfulSupplyChainAttack\n\n      | physicalAccess @entrypoint\n        user info: \"Attacker has physical access to the location where the hardware is physically deployed. They could then deny the hardware, locally connect to the hosted applications, and exploit potential physical vulnerabilities.\"\n        modeler info: \"This attack step can be used as an entry point when analyzing scenarios that involve gaining physical access to assets.\"\n        ->  deny,\n            sysExecutedApps.localConnect,\n            attemptHardwareModifications\n\n      | attemptHardwareModifications @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulHardwareModifications,\n            bypassHardwareModificationsProtection\n\n      & successfulHardwareModifications @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  hardwareModifications\n\n      | hardwareModifications @hidden\n        developer info: \"Attacker is able to modify the hardware setup. They could then exploit physical vulnerabilities or software vulnerabilities that require physical access.\"\n        ->  attemptUseVulnerabilityFromPhysicalAccess,\n            vulnerabilities.physicalAccessAchieved,\n            sysExecutedApps.physicalAccessAchieved\n\n      # hardwareModificationsProtection\n        user info: \"This defense protects against unauthorized modifications to the hardware that would allow an attacker to exploit a hardware vulnerability or a user to connect malicious devices to it.\"\n        developer info: \"But it does not protect against denial of service attacks or local connect on hosted applications.\"\n        ->  hardwareModificationsProtectionBypassed\n\n      | bypassHardwareModificationsProtection [VeryHardAndUncertain]\n        user info: \"Hardware modifications protection can be bypassed.\"\n        ->  hardwareModificationsProtectionBypassed\n\n      | hardwareModificationsProtectionBypassed @hidden\n        developer info: \"Hardware modifications protection is bypassed either because it was not set or the attacker was able to circumvent it through additional effort.\"\n        ->  successfulUseVulnerabilityFromPhysicalAccess,\n            successfulHardwareModifications,\n            successfulSpreadWormThroughRemovableMedia,\n            successfulUnsafeUserActivity\n\n      | attemptUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUnsafeUserActivity,\n            bypassHardwareModificationsProtection\n\n      & successfulUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  unsafeUserActivity\n\n      | unsafeUserActivity\n        user info: \"A user is performing unsafe actions on the hardware. This exposes the Applications running on top of the hardware and fulfils the physical access requirement of SoftwareVulnerabilities associated with them.\"\n        developer info: \"Currently only represents connecting a malicious removable media drive.\"\n        ->  sysExecutedApps.attemptUnsafeUserActivity,\n            sysExecutedApps.physicalAccessAchieved\n\n      | deny {A}\n        user info: \"Denial of service (DoS) attack on hardware leads to DoS on all the applications running on it and hosted data.\"\n        ->  sysExecutedApps.attemptDeny,\n            hostedData.attemptDeny\n\n      | read {C}\n        user info: \"Read on hardware leads to a read on all the applications running on it and hosted data.\"\n        ->  sysExecutedApps.attemptRead,\n            hostedData.attemptRead\n\n      | modify {I}\n        user info: \"Modify on hardware gives the attacker full access to the hardware and leads to a modify/write on all the applications running on it and hosted data.\"\n        ->  fullAccess,\n            sysExecutedApps.attemptModify,\n            hostedData.attemptWrite\n    }\n\n    asset SoftwareProduct extends Information\n      user info: \"A software product that certain applications are using which represents a specific software package, potentially even a version, which can be associated with certain vulnerabilities or have its deployment repositories compromised in a software supply chain attack.\"\n      developer info: \"This asset was introduced in order to improve the usability of the language and enable software supply chain attacks.\"\n    {\n      | compromiseApplications\n        user info: \"If the origin of a software product is compromised (modified maliciously) this is interpreted as a software supply chain attack and therefore the associated applications should also be fully compromised.\"\n        ->  softApplications.attemptFullAccessFromSupplyChainCompromise\n\n      | write @Override\n        user info: \"If the attacker is able to write the software product they are able to execute a software supply chain attack on the applications associated with it.\"\n        +>  compromiseApplications\n\n      /* The following three attack steps are used to trigger the\n       * SoftwareProduct's SoftwareVulnerabilities' impacts on each of the\n       * Applications associated with the SoftwareProduct separately.\n       */\n      | readApplications @hidden\n        developer info: \"This is an intermediary attack step to propagate read on all of the associated applications if the vulnerability has a confidentiality impact.\"\n        ->  softApplications.attemptReadFromSoftProdVulnerability\n\n      | modifyApplications @hidden\n        developer info: \"This is an intermediary attack step to propagate modify on all of the associated applications if the vulnerability has an integrity impact.\"\n        ->  softApplications.attemptModifyFromSoftProdVulnerability\n\n      | denyApplications @hidden\n        developer info: \"This is an intermediary attack step to propagate deny on all of the associated applications if the vulnerability has an availability impact.\"\n        ->  softApplications.attemptDenyFromSoftProdVulnerability\n    }\n\n    asset Application\n      user info: \"An application models any type of software process or component, from firmware and operating systems to plugins and sessions.\"\n      modeler info: \"Applications are some of the most common assets in models due to their versatility and scope.\"\n    {\n      let allVulnerabilities = vulnerabilities \\/ appSoftProduct.softProductVulnerabilities\n\n      let outgoingApplicationConnections = (appConnections \\/ outgoingAppConnections)\n      let ingoingApplicationConnections = (appConnections \\/ ingoingAppConnections)\n\n      # notPresent [Disabled]\n        user info: \"This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility that the Application does not actually exist. Typically this is useful to see what attack steps are removed if a particular non-essential component(e.g. a plugin, library, feature, or service).\"\n        developer info: \"This defense allows for both speculation about the presence of a particular application and to suggest that if it is possible removing it may restrict the attacker's actions.\"\n        ->  successfulUseVulnerability,\n            successfulReverseReach,\n            networkConnectFromResponse,\n            specificAccessFromLocalConnection,\n            specificAccessFromNetworkConnection,\n            localAccess,\n            networkAccess,\n            successfulUnsafeUserActivity,\n            fullAccessFromSupplyChainCompromise,\n            readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability,\n            successfulApplicationRespondConnectThroughData,\n            successfulAuthorizedApplicationRespondConnectThroughData,\n            successfulRead,\n            successfulModify,\n            successfulDeny\n\n      | attemptUseVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUseVulnerability,\n            protectorIDPSs.bypassEffectiveness\n\n      & successfulUseVulnerability @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  useVulnerability\n\n      | useVulnerability\n        user info: \"Try to exploit the associated vulnerabilities.\"\n        developer info: \"This includes vulnerabilities associated with the SoftwareProduct that this Application is running as well.\"\n        ->  allVulnerabilities().attemptAbuse,\n            attemptSoftwareProductAbuse,\n            readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability\n\n      | attemptReverseReach @entrypoint\n        user info: \"The attacker is reachable from this Application therefore start propagating reverse reach from it. Reverse reach is used to determine whether or not the attacker can be reached by the user.\"\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        modeler info: \"If the entry point of the attacker is an Application this attack step needs to be explicitly called on it by the modeler in order to have reverse reach start propagating from the Application to the rest of the assets in the model. This is the case because no other attack step on the Application asset triggers this attack step.\"\n        ->  successfulReverseReach\n\n      & successfulReverseReach @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  reverseReach\n\n      | reverseReach @hidden\n        developer info: \"Reverse reach is used to determine whether or not the attacker can be reached by the user. Reverse reach propagates toward outgoing or bidirectional communications.\"\n        ->  networks.attemptReverseReach,\n            ingoingApplicationConnections().attemptReverseReach,\n            appExecutedApps.attemptReverseReach,\n            attackerUnsafeUserActivityCapabilityWithReverseReach,\n            containedData.attemptReverseReach,\n            sentData.attemptReverseReach,\n            receivedData.attemptReverseReach,\n            networkConnectFromResponse\n\n      | localConnect\n        user info: \"The attacker can interface with the Application without going through networking communications. This is achieved by gaining full access on a hosted Application, specific access on the hosting Application, physical access on the hardware on which the Application is running, or via unsafe user activity.\"\n        ->  localAccess,\n            specificAccessFromLocalConnection,\n            attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application\n            allVulnerabilities().localAccessAchieved,\n            softwareProductVulnerabilityLocalAccessAchieved\n\n      | networkConnectUninspected\n        user info: \"An attacker can connect to any network exposed application and try to authenticate or trigger vulnerabilities.\"\n        ->  attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application\n            allVulnerabilities().networkAccessAchieved,\n            softwareProductVulnerabilityNetworkAccessAchieved,\n            networkConnect,\n            specificAccessNetworkConnect\n\n      | networkConnectInspected\n        user info: \"If the network communications occur via any ConnectionRules that have their payload inspected the attacker can still authenticate, but they cannot trigger vulnerabilities.\"\n        ->  networkConnect,\n            specificAccessNetworkConnect\n\n      | networkConnect @hidden\n        developer info: \"Intermediate attack step.\"\n        ->  networkAccess\n\n      | specificAccessNetworkConnect @hidden\n        developer info: \"Intermediate attack step.\"\n        ->  specificAccessFromNetworkConnection\n\n      | accessNetworkAndConnections @hidden\n        developer info: \"The attacker can access outgoing and bidirectional networks and connections associated with the application.\"\n        ->  networks.accessUninspected,\n            networks.accessInspected,\n            outgoingApplicationConnections().attemptConnectToApplicationsUninspected,\n            outgoingApplicationConnections().attemptConnectToApplicationsInspected,\n            outgoingApplicationConnections().attemptAccessNetworksUninspected,\n            outgoingApplicationConnections().attemptAccessNetworksInspected\n\n      | attemptNetworkConnectFromResponse @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  networkConnectFromResponse\n\n      & networkConnectFromResponse @hidden [VeryHardAndUncertain]\n        developer info: \"An attacker may be able to respond to requests submitted by a client application.\"\n        ->  networkConnectUninspected\n\n      & specificAccessFromLocalConnection @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for specific access.\"\n        ->  specificAccess\n\n      & specificAccessFromNetworkConnection @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for specific access.\"\n        ->  specificAccess\n\n      | specificAccess\n        user info: \"The adversary is able to gain low-privilege access on the Application which allows them to access the networks and connections associated with it and locally connect to hosted Applications. Additionally, if they have the required privileges the attacker may also access data hosted, sent, or received by the Application.\"\n        ->  appExecutedApps.localConnect, // An attacker with low-privilege access on the executing instance is assumed to be able to locally interact with the executed applications.\n            specificAccessRead,\n            specificAccessModify,\n            specificAccessDelete,\n            bypassContainerization,\n            attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application\n            attemptAuthorizedApplicationRespondConnectThroughData,\n            accessNetworkAndConnections // and access the network(s) and connections on/to which the app is connected\n\n      | bypassContainerization [HardAndUncertain]\n        user info: \"The attacker is able to break out of an application container/sandbox and try to exploit any vulnerability of the host application.\"\n        ->  hostApp.attemptUseVulnerability\n\n      | authenticate\n        user info: \"The attacker is able to authenticate with the appropriate high-level privileges.\"\n        ->  localAccess,\n            networkAccess,\n            allVulnerabilities().highPrivilegesAchieved,\n            softwareProductVulnerabilityHighPrivilegesAchieved\n\n      | specificAccessAuthenticate\n        user info: \"The attacker is able to authenticate with the appropriate low-level privileges.\"\n        ->  specificAccessFromLocalConnection,\n            specificAccessFromNetworkConnection,\n            allVulnerabilities().lowPrivilegesAchieved,\n            softwareProductVulnerabilityLowPrivilegesAchieved\n\n      & localAccess @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for full access.\"\n        ->  fullAccess\n\n      & networkAccess @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for full access.\"\n        ->  fullAccess\n\n      | fullAccess @entrypoint {C,I,A}\n        user info: \"Full access on the Application means the attacker has complete control of the application and can perform any actions within its execution context.\"\n        modeler info: \"It is common in models for the attacker to be granted full access on an Application, representing their own tools, that is connected to the Internet to explore possible attack vectors.\"\n        ->  attemptRead,\n            attemptModify,\n            attemptDeny,\n            executionPrivIAMs.attemptAssume,  // Assume also the execution privilege identities of this application to the access to the entire execution context\n            attemptApplicationRespondConnectThroughData,\n            accessNetworkAndConnections,  // and access the network(s) and connections on/to which the app is connected\n            hostApp.localConnect,    // and localConnect on the host application\n            managedRoutingFw.attemptModify, // if the routing firewall manager app is compromised the routing firewall should also be compromised\n            hostHardware.attemptSpreadWormThroughRemovableMedia, // Propagate malware worms through removable media\n            hostHardware.attemptUseVulnerabilityFromSoftwareFullAccess, // If this application is run directly on hardware full access on it allows the attacker to exploit hardware vulnerabilities that do not require physical access\n            specificAccess // And also provide specificAccess, mainly for completeness and more intuitive results\n\n      | physicalAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to propagate physical access throughout application nesting.\"\n        ->  allVulnerabilities().physicalAccessAchieved,\n            softwareProductVulnerabilityPhysicalAccessAchieved,\n            appExecutedApps.physicalAccessAchieved\n\n      | attemptUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUnsafeUserActivity,\n            attackerUnsafeUserActivityCapabilityWithReverseReach, // If the user can reach the attacker via networking assets this makes the unsafe user actions much easier to perform\n            attackerUnsafeUserActivityCapabilityWithoutReverseReach, // Without being able to reach the attacker the User can still perform malicious actions on their behalf, but it is much more complicated\n            protectorIDPSs.bypassEffectiveness\n\n      & successfulUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  unsafeUserActivity\n\n      | unsafeUserActivity\n        user info: \"The unsafe actions of users on this application open it up to attacks and enable vulnerabilities that require user interaction.\"\n        ->  localConnect,\n            networkConnectUninspected,\n            allVulnerabilities().userInteractionAchieved\n\n      | attackerUnsafeUserActivityCapability @hidden\n        developer info: \"The impacts of the user's unsafe actions are greatly limited if there are no channels through which the attacker can be reached by the unwitting user.\"\n        ->  successfulUnsafeUserActivity\n\n      & attackerUnsafeUserActivityCapabilityWithReverseReach @hidden\n        developer info: \"The attacker can be reached from this application and can therefore more easily exploit the unsafe user actions.\"\n        ->  attackerUnsafeUserActivityCapability\n\n      | attackerUnsafeUserActivityCapabilityWithoutReverseReach @hidden [VeryHardAndUncertain]\n        developer info: \"The attacker cannot be reached from this application. This means that the autonomous malicious code must either be able to do reconnaissance on the fly or the reconnaissance was done beforehand and coded into it. This is much more complex and difficult than the situation where the attacker is reachable from the application which restricts the capabilities of being successful. Important Note: This step should never directly or indirectly lead to reverse reach as it would fulfil the attacker interactivity requirements it is missing.\"\n        ->  attackerUnsafeUserActivityCapability\n\n      # supplyChainAuditing\n        user info: \"Auditing inside the supply chain can detect possible supply chain attacks.\"\n        ->  supplyChainAuditingBypassed\n\n      | bypassSupplyChainAuditing [VeryHardAndUncertain]\n        user info: \"Supply chain auditing can be bypassed.\"\n        ->  supplyChainAuditingBypassed\n\n      | supplyChainAuditingBypassed @hidden\n        developer info: \"The supply chain audit is bypassed either because it was not set or the attacker was able to circumvent it through additional effort.\"\n        ->  fullAccessFromSupplyChainCompromise\n\n      | attemptFullAccessFromSupplyChainCompromise @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  fullAccessFromSupplyChainCompromise,\n            bypassSupplyChainAuditing\n\n      & fullAccessFromSupplyChainCompromise @hidden\n        developer info: \"Intermediate attack step.\"\n        ->  fullAccess\n\n      /* Intermediate attack steps to allow SoftwareProduct Vulnerabilities to\n       * only happen after each Applications is reached by the attacker.\n       */\n      | attemptReadFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  readFromSoftProdVulnerability\n\n      | attemptModifyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  modifyFromSoftProdVulnerability\n\n      | attemptDenyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  denyFromSoftProdVulnerability\n\n      E softwareCheck @hidden\n        developer info: \"Only enable the following attacks steps if a SoftwareProduct is associated with this Application.\"\n        <-  appSoftProduct\n        ->  readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability\n\n      /* The seven following attack steps were implemented to trigger\n       * SoftwareVulnerabilities on a SoftwareProduct on each Application\n       * associated with the SoftwareProduct individually.\n       */\n      | softwareProductVulnerabilityLocalAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.localAccessAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityNetworkAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.networkAccessAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityPhysicalAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.physicalAccessAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityLowPrivilegesAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.lowPrivilegesAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityHighPrivilegesAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.highPrivilegesAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityUserInteractionAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.userInteractionAchieved,\n            softwareProductAbuse\n\n      | attemptSoftwareProductAbuse @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  softwareProductAbuse\n\n      & softwareProductAbuse @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability\n\n      & readFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to handle SoftwareProduct existence.\"\n        ->  attemptRead\n\n      & modifyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to handle SoftwareProduct existence.\"\n        ->  attemptModify\n\n      & denyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to handle SoftwareProduct existence.\"\n        ->  attemptDeny\n\n      | attemptApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulApplicationRespondConnectThroughData\n\n      & successfulApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  applicationRespondConnectThroughData\n\n      | applicationRespondConnectThroughData @hidden\n        developer info: \"After full access on the application received data can be used to try a connect through respond to the client side application.\"\n        ->  receivedData.attemptApplicationRespondConnect\n\n      | attemptAuthorizedApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulAuthorizedApplicationRespondConnectThroughData\n\n      & successfulAuthorizedApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  authorizedApplicationRespondConnectThroughData\n\n      | authorizedApplicationRespondConnectThroughData @hidden\n        developer info: \"After specific access on the application received data can be used to try a connect through respond to the client side application. To succeed the attacker must also attain write privileges on the received data.\"\n        ->  receivedData.authorizedApplicationRespondConnectFromApplication\n\n      | attemptRead @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulRead\n\n      & successfulRead @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  read\n\n      | read {C}\n        user info: \"The attacker can read some or all of this service's (and executed by this) source code and/or data (both local and sent/received).\"\n        ->  containedData.attemptRead,\n            appExecutedApps.attemptRead, // Read all applications executed by this (host) application\n            sentData.attemptRead, // Both sent and received Data can be read\n            receivedData.attemptRead\n\n      | specificAccessRead {C}\n        user info: \"The attacker can read the service's source code and/or sent and received Data, given the necessary permissions\"\n        ->  containedData.authorizedReadFromApplication,\n            sentData.authorizedReadFromApplication, // Both Data sent and received can be read given the necessary permissions\n            receivedData.authorizedReadFromApplication\n\n      | attemptModify @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulModify\n\n      & successfulModify @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  modify\n\n      | modify {I}\n        user info: \"The attacker can modify some or all of this service's (and executed by this) source code and/or data.\"\n        ->  fullAccess,\n            containedData.attemptWrite,\n            appExecutedApps.attemptModify, // Gain access on all applications executed by this (host) application\n            sentData.attemptWrite // Sent Data can be written/modified\n\n      | specificAccessModify {I}\n        user info: \"The attacker can modify the service's source code and/or sent  Data, given the necessary permissions\"\n        ->  containedData.authorizedWriteFromApplication,\n            sentData.authorizedWriteFromApplication // Sent Data can be written given the necessary permissions\n\n      | attemptDeny @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulDeny\n\n      & successfulDeny @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  deny\n\n      | deny {A}\n        user info: \"The attacker can deny some or all functionality and data pertaining to this application/service as well as executed applications.\"\n        ->  containedData.attemptDeny,\n            appExecutedApps.attemptDeny,\n            sentData.attemptDeny // Sent Data can also be denied\n\n      | specificAccessDelete {A}\n        user info: \"The attacker can delete some or all functionality and data pertaining to this application/service as well as executed applications, given the necessary permissions\"\n        ->  containedData.authorizedDeleteFromApplication,\n            sentData.authorizedDeleteFromApplication // Sent Data can be deleted given the necessary permissions\n\n      & denyFromNetworkingAsset @hidden\n        developer info: \"This is an intermediate attack step to only allow deny on an application when all the connection rules and networks associated with it are denied, because an app can be serving on many different ports.\"\n        ->  attemptDeny\n\n      & denyFromLockout @hidden\n        developer info: \"This is an intermediate attack step to only trigger deny on an application when all the executing access control roles are locked out.\"\n        ->  attemptDeny\n\n    }\n\n    asset IDPS extends Application\n      user info: \"An IDPS(Intrusion Detection and Prevention System) is tasked with protecting other applications from malicious activity, such as exploiting vulnerabilities or unsafe user actions.\"\n    {\n      # notPresent @Override @hidden [Disabled]\n        developer info: \"It would be ideal to hide this defense when using modelling tools to avoid confusion.\"\n        modeler info: \"As per the comment for the effectiveness defense, the notPresent defense does not function as desired for the IDPS asset and should not be used. The effectiveness defense should be adjusted to reflect the likelihood that the IDPS is present instead.\"\n\n      # effectiveness [Enabled]\n        user info: \"The effectiveness defense represents how capable the IDPS is to prevent disruptions from occurring on the associated applications.\"\n        modeler info: \"The notPresent defense should inversely impact the effectiveness defense. However, because this is not currently implemented in coreLang it is up to the modeler to properly take this into account when setting the values of these defenses.\"\n        ->  effectivenessBypassed\n\n      | bypassEffectiveness [VeryHardAndUncertain]\n        user info: \"The effectiveness of an IDPS can be bypassed.\"\n        ->  effectivenessBypassed\n\n      | effectivenessBypassed @hidden\n        developer info: \"The protection of the IDPS has been bypassed either as a result of attacker activity or due to some internal property of the IDPS.\"\n        ->  protectedApps.successfulUseVulnerability,\n            protectedApps.successfulUnsafeUserActivity\n\n      | fullAccess {C,I,A}\n        user info: \"The IDPS is no longer able to protect the apps assigned to it if it has been compromised itself.\"\n        +>  effectivenessBypassed\n\n      | deny {A}\n        developer info: \"The IDPS is no longer able to protect the apps assigned to it if it has been denied itself.\"\n        +>  effectivenessBypassed\n    }\n\n    asset PhysicalZone\n      user info: \"A physical zone is the location where hardware systems and networks are physically deployed.\"\n    {\n      | gainPhysicalAccess @entrypoint\n        user info: \"By gaining access on a physical zone, physical access on the housed hardware and networks is also attained.\"\n        modeler info: \"This attack step can be used as an entry point when analyzing scenarios that involve gaining physical access to assets.\"\n        ->  hardwareSystems.physicalAccess,\n            networks.physicalAccess\n    }\n}\n\nassociations {\n  Hardware         [hostHardware]      0..1 <-- SysExecution          --> *    [sysExecutedApps]        Application\n      user info: \"Hardware on which Applications are running. The host hardware is not mandatory to be specified.\"\n  Application      [hostApp]           0..1 <-- AppExecution          --> *    [appExecutedApps]        Application\n      user info: \"Sandboxing and containerization are represented through AppExecution. This application hosting can be nested. For example, application 1 runs application 2 which runs application 3. (Where application 1 is an OS, application 2 is a VM, and application 3 is app running in the VM.)\"\n  IDPS             [protectorIDPSs]       * <-- AppProtection         --> *    [protectedApps]          Application\n      user info: \"IDPSs can provide protection to other applications.\"\n  SoftwareProduct  [appSoftProduct]    0..1 <-- AppSoftwareProduct    --> *    [softApplications]       Application\n      user info: \"An application can be associated with a software product that has some specific characteristics such as specific Vulnerabilities and deployment repository.\"\n  PhysicalZone     [physicalZones]        * <-- ZoneInclusion         --> *    [hardwareSystems]        Hardware\n      user info: \"Access on PhysicalZone will give physicalAccess on the deployed Hardware, but access to the hardware does not provide access to the physical zone (e.g. iLOs).\"\n  PhysicalZone     [physicalZones]        * <-- ZoneInclusion         --> *    [networks]               Network\n      user info: \"Access on PhysicalZone will give physicalAccess on the deployed networks, but access to the network does not provide access to the physical zone.\"\n}", "type": "language"}
{"input": "Category: ComputeResources\n\nThe provided MAL code defines a domain-specific threat modeling language for cybersecurity, focusing on assets related to compute resources. The main assets in this model are Hardware, SoftwareProduct, Application, and IDPS (Intrusion Detection and Prevention System).\n\n1. Hardware: Represents the physical hardware on which applications run. It models attacks such as physical access, supply chain compromises, and hardware modifications. The hardware can also be affected by malware spread through removable media.\n\n2. SoftwareProduct: Represents a specific software package or version that certain applications use. It is associated with vulnerabilities or compromised deployment repositories in a software supply chain attack.\n\n3. Application: Represents any type of software process or component, such as firmware, operating systems, plugins, sessions, etc. It has various attack steps related to using vulnerabilities, network connectivity, local connectivity, and unsafe user activities.\n\n4. IDPS: An IDPS is an Intrusion Detection and Prevention System designed to protect other applications from malicious activities like exploiting vulnerabilities or unsafe user actions.\n\nThe model also includes various components, such as vulnerabilities, defenses (e.g., hardware modifications protection, supply chain auditing), and associations (e.g., connections between applications, software products, and networks).\n\nThe logical flow and relationships between elements are defined through various attack steps, which are used to model the propagation of attacks, defenses, and the impact of different actions on the assets.\n\nThe domain-specific implications of this MAL code lie in its focus on hardware, software, applications, and IDPS systems, making it suitable for analyzing threats related to these areas. The use of attack steps allows for a more detailed and structured representation of threat scenarios.\n\nThe code is written in a plain, professional language suitable for a technical audience, avoiding unnecessary repetition or vague summaries. It provides exhaustive and concise explanations of the purpose, function, and components of the MAL code.", "output": "category ComputeResources {\n\n    asset Hardware\n      user info: \"Specifies the hardware on which applications can run.\"\n    {\n      | attemptUseVulnerabilityFromPhysicalAccess @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUseVulnerabilityFromPhysicalAccess,\n            bypassHardwareModificationsProtection\n\n      & successfulUseVulnerabilityFromPhysicalAccess @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  useVulnerability\n\n      | attemptUseVulnerabilityFromSoftwareFullAccess @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  useVulnerability\n\n      | useVulnerability\n        user info: \"The attacker is able to use the associated vulnerabilities, usually as a result of obtaining physical access.\"\n        ->  vulnerabilities.attemptAbuse\n\n      | attemptSpreadWormThroughRemovableMedia @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulSpreadWormThroughRemovableMedia,\n            bypassHardwareModificationsProtection\n\n      & successfulSpreadWormThroughRemovableMedia @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  spreadWormThroughRemovableMedia\n\n      | spreadWormThroughRemovableMedia @hidden\n        developer info: \"Try to spread malware through removable media that the users connect to the hardware system.\"\n        ->  (users \\/ physicalZones.users).attemptDeliverMaliciousRemovableMedia\n\n      | fullAccess {C,I,A}\n        user info: \"Full access on a piece of hardware grants full access on the applications running on it and access to the hosted data.\"\n        ->  sysExecutedApps.fullAccess,\n            hostedData.attemptRead,\n            hostedData.attemptWrite,\n            deny,\n            attemptSpreadWormThroughRemovableMedia\n\n      | attemptSupplyChainAttack @entrypoint\n        user info: \"Adversaries may perform supply chain compromise attacks to gain control of hardware before it is put into use.\"\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        modeler info: \"Triggering this attack step is the only way to model hardware supply chain attacks in the language, therefore scenarios interested in those aspects need to employ it as an entry point.\"\n        ->  successfulSupplyChainAttack,\n            bypassSupplyChainAuditing\n\n      & successfulSupplyChainAttack @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        -> supplyChainAttack\n\n      | supplyChainAttack [VeryHardAndUncertain]\n        user info: \"A supply chain compromise means that the attacker has gained full access of the hardware.\"\n        modeler info: \"The Hardware supply chain attack represents an attacker being able to tamper with the hardware/firmware before the deployment of the product and not alterations made to the hardware/firmware once it is operating.\"\n        ->  fullAccess\n\n      # supplyChainAuditing\n        user info: \"Auditing inside the hardware supply chain can detect possible supply chain attacks.\"\n        ->  supplyChainAuditingBypassed\n\n      | bypassSupplyChainAuditing [VeryHardAndUncertain]\n        user info: \"Supply chain auditing can be bypassed.\"\n        ->  supplyChainAuditingBypassed\n\n      | supplyChainAuditingBypassed @hidden\n        developer info: \"Supply chain auditing is bypassed either because it was not set or the attacker was able to circumvent it through additional effort.\"\n        ->  successfulSupplyChainAttack\n\n      | physicalAccess @entrypoint\n        user info: \"Attacker has physical access to the location where the hardware is physically deployed. They could then deny the hardware, locally connect to the hosted applications, and exploit potential physical vulnerabilities.\"\n        modeler info: \"This attack step can be used as an entry point when analyzing scenarios that involve gaining physical access to assets.\"\n        ->  deny,\n            sysExecutedApps.localConnect,\n            attemptHardwareModifications\n\n      | attemptHardwareModifications @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulHardwareModifications,\n            bypassHardwareModificationsProtection\n\n      & successfulHardwareModifications @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  hardwareModifications\n\n      | hardwareModifications @hidden\n        developer info: \"Attacker is able to modify the hardware setup. They could then exploit physical vulnerabilities or software vulnerabilities that require physical access.\"\n        ->  attemptUseVulnerabilityFromPhysicalAccess,\n            vulnerabilities.physicalAccessAchieved,\n            sysExecutedApps.physicalAccessAchieved\n\n      # hardwareModificationsProtection\n        user info: \"This defense protects against unauthorized modifications to the hardware that would allow an attacker to exploit a hardware vulnerability or a user to connect malicious devices to it.\"\n        developer info: \"But it does not protect against denial of service attacks or local connect on hosted applications.\"\n        ->  hardwareModificationsProtectionBypassed\n\n      | bypassHardwareModificationsProtection [VeryHardAndUncertain]\n        user info: \"Hardware modifications protection can be bypassed.\"\n        ->  hardwareModificationsProtectionBypassed\n\n      | hardwareModificationsProtectionBypassed @hidden\n        developer info: \"Hardware modifications protection is bypassed either because it was not set or the attacker was able to circumvent it through additional effort.\"\n        ->  successfulUseVulnerabilityFromPhysicalAccess,\n            successfulHardwareModifications,\n            successfulSpreadWormThroughRemovableMedia,\n            successfulUnsafeUserActivity\n\n      | attemptUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUnsafeUserActivity,\n            bypassHardwareModificationsProtection\n\n      & successfulUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  unsafeUserActivity\n\n      | unsafeUserActivity\n        user info: \"A user is performing unsafe actions on the hardware. This exposes the Applications running on top of the hardware and fulfils the physical access requirement of SoftwareVulnerabilities associated with them.\"\n        developer info: \"Currently only represents connecting a malicious removable media drive.\"\n        ->  sysExecutedApps.attemptUnsafeUserActivity,\n            sysExecutedApps.physicalAccessAchieved\n\n      | deny {A}\n        user info: \"Denial of service (DoS) attack on hardware leads to DoS on all the applications running on it and hosted data.\"\n        ->  sysExecutedApps.attemptDeny,\n            hostedData.attemptDeny\n\n      | read {C}\n        user info: \"Read on hardware leads to a read on all the applications running on it and hosted data.\"\n        ->  sysExecutedApps.attemptRead,\n            hostedData.attemptRead\n\n      | modify {I}\n        user info: \"Modify on hardware gives the attacker full access to the hardware and leads to a modify/write on all the applications running on it and hosted data.\"\n        ->  fullAccess,\n            sysExecutedApps.attemptModify,\n            hostedData.attemptWrite\n    }\n\n    asset SoftwareProduct extends Information\n      user info: \"A software product that certain applications are using which represents a specific software package, potentially even a version, which can be associated with certain vulnerabilities or have its deployment repositories compromised in a software supply chain attack.\"\n      developer info: \"This asset was introduced in order to improve the usability of the language and enable software supply chain attacks.\"\n    {\n      | compromiseApplications\n        user info: \"If the origin of a software product is compromised (modified maliciously) this is interpreted as a software supply chain attack and therefore the associated applications should also be fully compromised.\"\n        ->  softApplications.attemptFullAccessFromSupplyChainCompromise\n\n      | write @Override\n        user info: \"If the attacker is able to write the software product they are able to execute a software supply chain attack on the applications associated with it.\"\n        +>  compromiseApplications\n\n      /* The following three attack steps are used to trigger the\n       * SoftwareProduct's SoftwareVulnerabilities' impacts on each of the\n       * Applications associated with the SoftwareProduct separately.\n       */\n      | readApplications @hidden\n        developer info: \"This is an intermediary attack step to propagate read on all of the associated applications if the vulnerability has a confidentiality impact.\"\n        ->  softApplications.attemptReadFromSoftProdVulnerability\n\n      | modifyApplications @hidden\n        developer info: \"This is an intermediary attack step to propagate modify on all of the associated applications if the vulnerability has an integrity impact.\"\n        ->  softApplications.attemptModifyFromSoftProdVulnerability\n\n      | denyApplications @hidden\n        developer info: \"This is an intermediary attack step to propagate deny on all of the associated applications if the vulnerability has an availability impact.\"\n        ->  softApplications.attemptDenyFromSoftProdVulnerability\n    }\n\n    asset Application\n      user info: \"An application models any type of software process or component, from firmware and operating systems to plugins and sessions.\"\n      modeler info: \"Applications are some of the most common assets in models due to their versatility and scope.\"\n    {\n      let allVulnerabilities = vulnerabilities \\/ appSoftProduct.softProductVulnerabilities\n\n      let outgoingApplicationConnections = (appConnections \\/ outgoingAppConnections)\n      let ingoingApplicationConnections = (appConnections \\/ ingoingAppConnections)\n\n      # notPresent [Disabled]\n        user info: \"This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility that the Application does not actually exist. Typically this is useful to see what attack steps are removed if a particular non-essential component(e.g. a plugin, library, feature, or service).\"\n        developer info: \"This defense allows for both speculation about the presence of a particular application and to suggest that if it is possible removing it may restrict the attacker's actions.\"\n        ->  successfulUseVulnerability,\n            successfulReverseReach,\n            networkConnectFromResponse,\n            specificAccessFromLocalConnection,\n            specificAccessFromNetworkConnection,\n            localAccess,\n            networkAccess,\n            successfulUnsafeUserActivity,\n            fullAccessFromSupplyChainCompromise,\n            readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability,\n            successfulApplicationRespondConnectThroughData,\n            successfulAuthorizedApplicationRespondConnectThroughData,\n            successfulRead,\n            successfulModify,\n            successfulDeny\n\n      | attemptUseVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUseVulnerability,\n            protectorIDPSs.bypassEffectiveness\n\n      & successfulUseVulnerability @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  useVulnerability\n\n      | useVulnerability\n        user info: \"Try to exploit the associated vulnerabilities.\"\n        developer info: \"This includes vulnerabilities associated with the SoftwareProduct that this Application is running as well.\"\n        ->  allVulnerabilities().attemptAbuse,\n            attemptSoftwareProductAbuse,\n            readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability\n\n      | attemptReverseReach @entrypoint\n        user info: \"The attacker is reachable from this Application therefore start propagating reverse reach from it. Reverse reach is used to determine whether or not the attacker can be reached by the user.\"\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        modeler info: \"If the entry point of the attacker is an Application this attack step needs to be explicitly called on it by the modeler in order to have reverse reach start propagating from the Application to the rest of the assets in the model. This is the case because no other attack step on the Application asset triggers this attack step.\"\n        ->  successfulReverseReach\n\n      & successfulReverseReach @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  reverseReach\n\n      | reverseReach @hidden\n        developer info: \"Reverse reach is used to determine whether or not the attacker can be reached by the user. Reverse reach propagates toward outgoing or bidirectional communications.\"\n        ->  networks.attemptReverseReach,\n            ingoingApplicationConnections().attemptReverseReach,\n            appExecutedApps.attemptReverseReach,\n            attackerUnsafeUserActivityCapabilityWithReverseReach,\n            containedData.attemptReverseReach,\n            sentData.attemptReverseReach,\n            receivedData.attemptReverseReach,\n            networkConnectFromResponse\n\n      | localConnect\n        user info: \"The attacker can interface with the Application without going through networking communications. This is achieved by gaining full access on a hosted Application, specific access on the hosting Application, physical access on the hardware on which the Application is running, or via unsafe user activity.\"\n        ->  localAccess,\n            specificAccessFromLocalConnection,\n            attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application\n            allVulnerabilities().localAccessAchieved,\n            softwareProductVulnerabilityLocalAccessAchieved\n\n      | networkConnectUninspected\n        user info: \"An attacker can connect to any network exposed application and try to authenticate or trigger vulnerabilities.\"\n        ->  attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application\n            allVulnerabilities().networkAccessAchieved,\n            softwareProductVulnerabilityNetworkAccessAchieved,\n            networkConnect,\n            specificAccessNetworkConnect\n\n      | networkConnectInspected\n        user info: \"If the network communications occur via any ConnectionRules that have their payload inspected the attacker can still authenticate, but they cannot trigger vulnerabilities.\"\n        ->  networkConnect,\n            specificAccessNetworkConnect\n\n      | networkConnect @hidden\n        developer info: \"Intermediate attack step.\"\n        ->  networkAccess\n\n      | specificAccessNetworkConnect @hidden\n        developer info: \"Intermediate attack step.\"\n        ->  specificAccessFromNetworkConnection\n\n      | accessNetworkAndConnections @hidden\n        developer info: \"The attacker can access outgoing and bidirectional networks and connections associated with the application.\"\n        ->  networks.accessUninspected,\n            networks.accessInspected,\n            outgoingApplicationConnections().attemptConnectToApplicationsUninspected,\n            outgoingApplicationConnections().attemptConnectToApplicationsInspected,\n            outgoingApplicationConnections().attemptAccessNetworksUninspected,\n            outgoingApplicationConnections().attemptAccessNetworksInspected\n\n      | attemptNetworkConnectFromResponse @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  networkConnectFromResponse\n\n      & networkConnectFromResponse @hidden [VeryHardAndUncertain]\n        developer info: \"An attacker may be able to respond to requests submitted by a client application.\"\n        ->  networkConnectUninspected\n\n      & specificAccessFromLocalConnection @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for specific access.\"\n        ->  specificAccess\n\n      & specificAccessFromNetworkConnection @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for specific access.\"\n        ->  specificAccess\n\n      | specificAccess\n        user info: \"The adversary is able to gain low-privilege access on the Application which allows them to access the networks and connections associated with it and locally connect to hosted Applications. Additionally, if they have the required privileges the attacker may also access data hosted, sent, or received by the Application.\"\n        ->  appExecutedApps.localConnect, // An attacker with low-privilege access on the executing instance is assumed to be able to locally interact with the executed applications.\n            specificAccessRead,\n            specificAccessModify,\n            specificAccessDelete,\n            bypassContainerization,\n            attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application\n            attemptAuthorizedApplicationRespondConnectThroughData,\n            accessNetworkAndConnections // and access the network(s) and connections on/to which the app is connected\n\n      | bypassContainerization [HardAndUncertain]\n        user info: \"The attacker is able to break out of an application container/sandbox and try to exploit any vulnerability of the host application.\"\n        ->  hostApp.attemptUseVulnerability\n\n      | authenticate\n        user info: \"The attacker is able to authenticate with the appropriate high-level privileges.\"\n        ->  localAccess,\n            networkAccess,\n            allVulnerabilities().highPrivilegesAchieved,\n            softwareProductVulnerabilityHighPrivilegesAchieved\n\n      | specificAccessAuthenticate\n        user info: \"The attacker is able to authenticate with the appropriate low-level privileges.\"\n        ->  specificAccessFromLocalConnection,\n            specificAccessFromNetworkConnection,\n            allVulnerabilities().lowPrivilegesAchieved,\n            softwareProductVulnerabilityLowPrivilegesAchieved\n\n      & localAccess @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for full access.\"\n        ->  fullAccess\n\n      & networkAccess @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for full access.\"\n        ->  fullAccess\n\n      | fullAccess @entrypoint {C,I,A}\n        user info: \"Full access on the Application means the attacker has complete control of the application and can perform any actions within its execution context.\"\n        modeler info: \"It is common in models for the attacker to be granted full access on an Application, representing their own tools, that is connected to the Internet to explore possible attack vectors.\"\n        ->  attemptRead,\n            attemptModify,\n            attemptDeny,\n            executionPrivIAMs.attemptAssume,  // Assume also the execution privilege identities of this application to the access to the entire execution context\n            attemptApplicationRespondConnectThroughData,\n            accessNetworkAndConnections,  // and access the network(s) and connections on/to which the app is connected\n            hostApp.localConnect,    // and localConnect on the host application\n            managedRoutingFw.attemptModify, // if the routing firewall manager app is compromised the routing firewall should also be compromised\n            hostHardware.attemptSpreadWormThroughRemovableMedia, // Propagate malware worms through removable media\n            hostHardware.attemptUseVulnerabilityFromSoftwareFullAccess, // If this application is run directly on hardware full access on it allows the attacker to exploit hardware vulnerabilities that do not require physical access\n            specificAccess // And also provide specificAccess, mainly for completeness and more intuitive results\n\n      | physicalAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to propagate physical access throughout application nesting.\"\n        ->  allVulnerabilities().physicalAccessAchieved,\n            softwareProductVulnerabilityPhysicalAccessAchieved,\n            appExecutedApps.physicalAccessAchieved\n\n      | attemptUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUnsafeUserActivity,\n            attackerUnsafeUserActivityCapabilityWithReverseReach, // If the user can reach the attacker via networking assets this makes the unsafe user actions much easier to perform\n            attackerUnsafeUserActivityCapabilityWithoutReverseReach, // Without being able to reach the attacker the User can still perform malicious actions on their behalf, but it is much more complicated\n            protectorIDPSs.bypassEffectiveness\n\n      & successfulUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  unsafeUserActivity\n\n      | unsafeUserActivity\n        user info: \"The unsafe actions of users on this application open it up to attacks and enable vulnerabilities that require user interaction.\"\n        ->  localConnect,\n            networkConnectUninspected,\n            allVulnerabilities().userInteractionAchieved\n\n      | attackerUnsafeUserActivityCapability @hidden\n        developer info: \"The impacts of the user's unsafe actions are greatly limited if there are no channels through which the attacker can be reached by the unwitting user.\"\n        ->  successfulUnsafeUserActivity\n\n      & attackerUnsafeUserActivityCapabilityWithReverseReach @hidden\n        developer info: \"The attacker can be reached from this application and can therefore more easily exploit the unsafe user actions.\"\n        ->  attackerUnsafeUserActivityCapability\n\n      | attackerUnsafeUserActivityCapabilityWithoutReverseReach @hidden [VeryHardAndUncertain]\n        developer info: \"The attacker cannot be reached from this application. This means that the autonomous malicious code must either be able to do reconnaissance on the fly or the reconnaissance was done beforehand and coded into it. This is much more complex and difficult than the situation where the attacker is reachable from the application which restricts the capabilities of being successful. Important Note: This step should never directly or indirectly lead to reverse reach as it would fulfil the attacker interactivity requirements it is missing.\"\n        ->  attackerUnsafeUserActivityCapability\n\n      # supplyChainAuditing\n        user info: \"Auditing inside the supply chain can detect possible supply chain attacks.\"\n        ->  supplyChainAuditingBypassed\n\n      | bypassSupplyChainAuditing [VeryHardAndUncertain]\n        user info: \"Supply chain auditing can be bypassed.\"\n        ->  supplyChainAuditingBypassed\n\n      | supplyChainAuditingBypassed @hidden\n        developer info: \"The supply chain audit is bypassed either because it was not set or the attacker was able to circumvent it through additional effort.\"\n        ->  fullAccessFromSupplyChainCompromise\n\n      | attemptFullAccessFromSupplyChainCompromise @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  fullAccessFromSupplyChainCompromise,\n            bypassSupplyChainAuditing\n\n      & fullAccessFromSupplyChainCompromise @hidden\n        developer info: \"Intermediate attack step.\"\n        ->  fullAccess\n\n      /* Intermediate attack steps to allow SoftwareProduct Vulnerabilities to\n       * only happen after each Applications is reached by the attacker.\n       */\n      | attemptReadFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  readFromSoftProdVulnerability\n\n      | attemptModifyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  modifyFromSoftProdVulnerability\n\n      | attemptDenyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  denyFromSoftProdVulnerability\n\n      E softwareCheck @hidden\n        developer info: \"Only enable the following attacks steps if a SoftwareProduct is associated with this Application.\"\n        <-  appSoftProduct\n        ->  readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability\n\n      /* The seven following attack steps were implemented to trigger\n       * SoftwareVulnerabilities on a SoftwareProduct on each Application\n       * associated with the SoftwareProduct individually.\n       */\n      | softwareProductVulnerabilityLocalAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.localAccessAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityNetworkAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.networkAccessAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityPhysicalAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.physicalAccessAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityLowPrivilegesAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.lowPrivilegesAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityHighPrivilegesAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.highPrivilegesAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityUserInteractionAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.userInteractionAchieved,\n            softwareProductAbuse\n\n      | attemptSoftwareProductAbuse @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  softwareProductAbuse\n\n      & softwareProductAbuse @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability\n\n      & readFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to handle SoftwareProduct existence.\"\n        ->  attemptRead\n\n      & modifyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to handle SoftwareProduct existence.\"\n        ->  attemptModify\n\n      & denyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to handle SoftwareProduct existence.\"\n        ->  attemptDeny\n\n      | attemptApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulApplicationRespondConnectThroughData\n\n      & successfulApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  applicationRespondConnectThroughData\n\n      | applicationRespondConnectThroughData @hidden\n        developer info: \"After full access on the application received data can be used to try a connect through respond to the client side application.\"\n        ->  receivedData.attemptApplicationRespondConnect\n\n      | attemptAuthorizedApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulAuthorizedApplicationRespondConnectThroughData\n\n      & successfulAuthorizedApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  authorizedApplicationRespondConnectThroughData\n\n      | authorizedApplicationRespondConnectThroughData @hidden\n        developer info: \"After specific access on the application received data can be used to try a connect through respond to the client side application. To succeed the attacker must also attain write privileges on the received data.\"\n        ->  receivedData.authorizedApplicationRespondConnectFromApplication\n\n      | attemptRead @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulRead\n\n      & successfulRead @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  read\n\n      | read {C}\n        user info: \"The attacker can read some or all of this service's (and executed by this) source code and/or data (both local and sent/received).\"\n        ->  containedData.attemptRead,\n            appExecutedApps.attemptRead, // Read all applications executed by this (host) application\n            sentData.attemptRead, // Both sent and received Data can be read\n            receivedData.attemptRead\n\n      | specificAccessRead {C}\n        user info: \"The attacker can read the service's source code and/or sent and received Data, given the necessary permissions\"\n        ->  containedData.authorizedReadFromApplication,\n            sentData.authorizedReadFromApplication, // Both Data sent and received can be read given the necessary permissions\n            receivedData.authorizedReadFromApplication\n\n      | attemptModify @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulModify\n\n      & successfulModify @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  modify\n\n      | modify {I}\n        user info: \"The attacker can modify some or all of this service's (and executed by this) source code and/or data.\"\n        ->  fullAccess,\n            containedData.attemptWrite,\n            appExecutedApps.attemptModify, // Gain access on all applications executed by this (host) application\n            sentData.attemptWrite // Sent Data can be written/modified\n\n      | specificAccessModify {I}\n        user info: \"The attacker can modify the service's source code and/or sent  Data, given the necessary permissions\"\n        ->  containedData.authorizedWriteFromApplication,\n            sentData.authorizedWriteFromApplication // Sent Data can be written given the necessary permissions\n\n      | attemptDeny @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulDeny\n\n      & successfulDeny @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  deny\n\n      | deny {A}\n        user info: \"The attacker can deny some or all functionality and data pertaining to this application/service as well as executed applications.\"\n        ->  containedData.attemptDeny,\n            appExecutedApps.attemptDeny,\n            sentData.attemptDeny // Sent Data can also be denied\n\n      | specificAccessDelete {A}\n        user info: \"The attacker can delete some or all functionality and data pertaining to this application/service as well as executed applications, given the necessary permissions\"\n        ->  containedData.authorizedDeleteFromApplication,\n            sentData.authorizedDeleteFromApplication // Sent Data can be deleted given the necessary permissions\n\n      & denyFromNetworkingAsset @hidden\n        developer info: \"This is an intermediate attack step to only allow deny on an application when all the connection rules and networks associated with it are denied, because an app can be serving on many different ports.\"\n        ->  attemptDeny\n\n      & denyFromLockout @hidden\n        developer info: \"This is an intermediate attack step to only trigger deny on an application when all the executing access control roles are locked out.\"\n        ->  attemptDeny\n\n    }\n\n    asset IDPS extends Application\n      user info: \"An IDPS(Intrusion Detection and Prevention System) is tasked with protecting other applications from malicious activity, such as exploiting vulnerabilities or unsafe user actions.\"\n    {\n      # notPresent @Override @hidden [Disabled]\n        developer info: \"It would be ideal to hide this defense when using modelling tools to avoid confusion.\"\n        modeler info: \"As per the comment for the effectiveness defense, the notPresent defense does not function as desired for the IDPS asset and should not be used. The effectiveness defense should be adjusted to reflect the likelihood that the IDPS is present instead.\"\n\n      # effectiveness [Enabled]\n        user info: \"The effectiveness defense represents how capable the IDPS is to prevent disruptions from occurring on the associated applications.\"\n        modeler info: \"The notPresent defense should inversely impact the effectiveness defense. However, because this is not currently implemented in coreLang it is up to the modeler to properly take this into account when setting the values of these defenses.\"\n        ->  effectivenessBypassed\n\n      | bypassEffectiveness [VeryHardAndUncertain]\n        user info: \"The effectiveness of an IDPS can be bypassed.\"\n        ->  effectivenessBypassed\n\n      | effectivenessBypassed @hidden\n        developer info: \"The protection of the IDPS has been bypassed either as a result of attacker activity or due to some internal property of the IDPS.\"\n        ->  protectedApps.successfulUseVulnerability,\n            protectedApps.successfulUnsafeUserActivity\n\n      | fullAccess {C,I,A}\n        user info: \"The IDPS is no longer able to protect the apps assigned to it if it has been compromised itself.\"\n        +>  effectivenessBypassed\n\n      | deny {A}\n        developer info: \"The IDPS is no longer able to protect the apps assigned to it if it has been denied itself.\"\n        +>  effectivenessBypassed\n    }\n\n    asset PhysicalZone\n      user info: \"A physical zone is the location where hardware systems and networks are physically deployed.\"\n    {\n      | gainPhysicalAccess @entrypoint\n        user info: \"By gaining access on a physical zone, physical access on the housed hardware and networks is also attained.\"\n        modeler info: \"This attack step can be used as an entry point when analyzing scenarios that involve gaining physical access to assets.\"\n        ->  hardwareSystems.physicalAccess,\n            networks.physicalAccess\n    }\n}", "type": "category"}
{"input": "This MAL code defines a series of attack steps, defenses, and assets related to hardware cybersecurity. The primary asset is `Hardware`, which represents the physical devices on which applications can run.\n\n1. `attemptUseVulnerabilityFromPhysicalAccess`, `successfulUseVulnerabilityFromPhysicalAccess`, and `useVulnerability`: These steps model the attacker's ability to exploit vulnerabilities in the hardware, usually as a result of obtaining physical access. The `useVulnerability` step triggers the abuse of associated vulnerabilities.\n\n2. `attemptSpreadWormThroughRemovableMedia`, `successfulSpreadWormThroughRemovableMedia`, and `spreadWormThroughRemovableMedia`: These steps model the attacker's ability to spread malware through removable media connected to the hardware system.\n\n3. `fullAccess`, `attemptSupplyChainAttack`, `successfulSupplyChainAttack`, `supplyChainAttack`, `supplyChainAuditing`, `bypassSupplyChainAuditing`, and `supplyChainAuditingBypassed`: These steps and associations represent hardware supply chain attacks, auditing, and bypasses. The `attemptSupplyChainAttack` is the entry point for modeling hardware supply chain attacks.\n\n4. `physicalAccess`, `attemptHardwareModifications`, `successfulHardwareModifications`, `hardwareModifications`, `hardwareModificationsProtection`, `bypassHardwareModificationsProtection`, and `hardwareModificationsProtectionBypassed`: These steps and associations model physical access to the hardware, hardware modifications, and defenses against unauthorized modifications.\n\n5. `attemptUnsafeUserActivity`, `successfulUnsafeUserActivity`, and `unsafeUserActivity`: These steps model unsafe user activities that expose the applications running on the hardware and fulfill the physical access requirement of software vulnerabilities associated with them.\n\n6. `deny`, `read`, and `modify`: These steps model denial of service, read, and modify attacks on the hardware, respectively, leading to corresponding actions on the applications running on it and the hosted data.\n\nEach step or association can have a level of difficulty (ranging from Easy, Medium, Hard, VeryHard, or Uncertain) and an indication of whether it can be hidden from detection. The `@hidden` attribute is used to mark attack steps that are not immediately visible or detectable. The `[VeryHardAndUncertain]` indicates that the step is both difficult and uncertain to execute.\n\nThis MAL code provides a structured way to model various cybersecurity threats related to hardware, including physical access, hardware modifications, supply chain attacks, and unsafe user activities. It can be used to create threat models for hardware systems and analyze potential vulnerabilities and defenses.", "output": "asset Hardware\n      user info: \"Specifies the hardware on which applications can run.\"\n    {\n      | attemptUseVulnerabilityFromPhysicalAccess @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUseVulnerabilityFromPhysicalAccess,\n            bypassHardwareModificationsProtection\n\n      & successfulUseVulnerabilityFromPhysicalAccess @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  useVulnerability\n\n      | attemptUseVulnerabilityFromSoftwareFullAccess @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  useVulnerability\n\n      | useVulnerability\n        user info: \"The attacker is able to use the associated vulnerabilities, usually as a result of obtaining physical access.\"\n        ->  vulnerabilities.attemptAbuse\n\n      | attemptSpreadWormThroughRemovableMedia @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulSpreadWormThroughRemovableMedia,\n            bypassHardwareModificationsProtection\n\n      & successfulSpreadWormThroughRemovableMedia @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  spreadWormThroughRemovableMedia\n\n      | spreadWormThroughRemovableMedia @hidden\n        developer info: \"Try to spread malware through removable media that the users connect to the hardware system.\"\n        ->  (users \\/ physicalZones.users).attemptDeliverMaliciousRemovableMedia\n\n      | fullAccess {C,I,A}\n        user info: \"Full access on a piece of hardware grants full access on the applications running on it and access to the hosted data.\"\n        ->  sysExecutedApps.fullAccess,\n            hostedData.attemptRead,\n            hostedData.attemptWrite,\n            deny,\n            attemptSpreadWormThroughRemovableMedia\n\n      | attemptSupplyChainAttack @entrypoint\n        user info: \"Adversaries may perform supply chain compromise attacks to gain control of hardware before it is put into use.\"\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        modeler info: \"Triggering this attack step is the only way to model hardware supply chain attacks in the language, therefore scenarios interested in those aspects need to employ it as an entry point.\"\n        ->  successfulSupplyChainAttack,\n            bypassSupplyChainAuditing\n\n      & successfulSupplyChainAttack @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        -> supplyChainAttack\n\n      | supplyChainAttack [VeryHardAndUncertain]\n        user info: \"A supply chain compromise means that the attacker has gained full access of the hardware.\"\n        modeler info: \"The Hardware supply chain attack represents an attacker being able to tamper with the hardware/firmware before the deployment of the product and not alterations made to the hardware/firmware once it is operating.\"\n        ->  fullAccess\n\n      # supplyChainAuditing\n        user info: \"Auditing inside the hardware supply chain can detect possible supply chain attacks.\"\n        ->  supplyChainAuditingBypassed\n\n      | bypassSupplyChainAuditing [VeryHardAndUncertain]\n        user info: \"Supply chain auditing can be bypassed.\"\n        ->  supplyChainAuditingBypassed\n\n      | supplyChainAuditingBypassed @hidden\n        developer info: \"Supply chain auditing is bypassed either because it was not set or the attacker was able to circumvent it through additional effort.\"\n        ->  successfulSupplyChainAttack\n\n      | physicalAccess @entrypoint\n        user info: \"Attacker has physical access to the location where the hardware is physically deployed. They could then deny the hardware, locally connect to the hosted applications, and exploit potential physical vulnerabilities.\"\n        modeler info: \"This attack step can be used as an entry point when analyzing scenarios that involve gaining physical access to assets.\"\n        ->  deny,\n            sysExecutedApps.localConnect,\n            attemptHardwareModifications\n\n      | attemptHardwareModifications @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulHardwareModifications,\n            bypassHardwareModificationsProtection\n\n      & successfulHardwareModifications @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  hardwareModifications\n\n      | hardwareModifications @hidden\n        developer info: \"Attacker is able to modify the hardware setup. They could then exploit physical vulnerabilities or software vulnerabilities that require physical access.\"\n        ->  attemptUseVulnerabilityFromPhysicalAccess,\n            vulnerabilities.physicalAccessAchieved,\n            sysExecutedApps.physicalAccessAchieved\n\n      # hardwareModificationsProtection\n        user info: \"This defense protects against unauthorized modifications to the hardware that would allow an attacker to exploit a hardware vulnerability or a user to connect malicious devices to it.\"\n        developer info: \"But it does not protect against denial of service attacks or local connect on hosted applications.\"\n        ->  hardwareModificationsProtectionBypassed\n\n      | bypassHardwareModificationsProtection [VeryHardAndUncertain]\n        user info: \"Hardware modifications protection can be bypassed.\"\n        ->  hardwareModificationsProtectionBypassed\n\n      | hardwareModificationsProtectionBypassed @hidden\n        developer info: \"Hardware modifications protection is bypassed either because it was not set or the attacker was able to circumvent it through additional effort.\"\n        ->  successfulUseVulnerabilityFromPhysicalAccess,\n            successfulHardwareModifications,\n            successfulSpreadWormThroughRemovableMedia,\n            successfulUnsafeUserActivity\n\n      | attemptUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUnsafeUserActivity,\n            bypassHardwareModificationsProtection\n\n      & successfulUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  unsafeUserActivity\n\n      | unsafeUserActivity\n        user info: \"A user is performing unsafe actions on the hardware. This exposes the Applications running on top of the hardware and fulfils the physical access requirement of SoftwareVulnerabilities associated with them.\"\n        developer info: \"Currently only represents connecting a malicious removable media drive.\"\n        ->  sysExecutedApps.attemptUnsafeUserActivity,\n            sysExecutedApps.physicalAccessAchieved\n\n      | deny {A}\n        user info: \"Denial of service (DoS) attack on hardware leads to DoS on all the applications running on it and hosted data.\"\n        ->  sysExecutedApps.attemptDeny,\n            hostedData.attemptDeny\n\n      | read {C}\n        user info: \"Read on hardware leads to a read on all the applications running on it and hosted data.\"\n        ->  sysExecutedApps.attemptRead,\n            hostedData.attemptRead\n\n      | modify {I}\n        user info: \"Modify on hardware gives the attacker full access to the hardware and leads to a modify/write on all the applications running on it and hosted data.\"\n        ->  fullAccess,\n            sysExecutedApps.attemptModify,\n            hostedData.attemptWrite\n    }", "type": "asset"}
{"input": "This MAL code defines a custom asset named `SoftwareProduct`, which represents a specific software package or version that certain applications use. The primary purpose of this asset is to model software supply chain attacks, where the software product can be compromised, leading to the potential compromise of associated applications.\n\nThe `SoftwareProduct` asset has one attack step defined: `compromiseApplications`. This attack step triggers if the software product's origin is compromised (modified maliciously). It interprets the situation as a software supply chain attack and attempts to compromise the associated applications fully.\n\nTo accomplish this, the `compromiseApplications` attack step includes three intermediary attack steps: `readApplications`, `modifyApplications`, and `denyApplications`. These steps are used to trigger the `SoftwareProduct`'s `SoftwareVulnerabilities` impacts on each associated application separately, depending on the vulnerability's impact type (confidentiality, integrity, or availability).\n\nThe `write` attack step is another action that, if executed by the attacker, allows them to write the software product. This results in a software supply chain attack on the associated applications.\n\nIn summary, this MAL code models a software product asset and its associated software supply chain attack scenarios, where the compromise of the software product can lead to the compromise of the applications that use it. The attack steps defined in the code are used to propagate the impacts of the software product's vulnerabilities to the associated applications.", "output": "asset SoftwareProduct extends Information\n      user info: \"A software product that certain applications are using which represents a specific software package, potentially even a version, which can be associated with certain vulnerabilities or have its deployment repositories compromised in a software supply chain attack.\"\n      developer info: \"This asset was introduced in order to improve the usability of the language and enable software supply chain attacks.\"\n    {\n      | compromiseApplications\n        user info: \"If the origin of a software product is compromised (modified maliciously) this is interpreted as a software supply chain attack and therefore the associated applications should also be fully compromised.\"\n        ->  softApplications.attemptFullAccessFromSupplyChainCompromise\n\n      | write @Override\n        user info: \"If the attacker is able to write the software product they are able to execute a software supply chain attack on the applications associated with it.\"\n        +>  compromiseApplications\n\n      /* The following three attack steps are used to trigger the\n       * SoftwareProduct's SoftwareVulnerabilities' impacts on each of the\n       * Applications associated with the SoftwareProduct separately.\n       */\n      | readApplications @hidden\n        developer info: \"This is an intermediary attack step to propagate read on all of the associated applications if the vulnerability has a confidentiality impact.\"\n        ->  softApplications.attemptReadFromSoftProdVulnerability\n\n      | modifyApplications @hidden\n        developer info: \"This is an intermediary attack step to propagate modify on all of the associated applications if the vulnerability has an integrity impact.\"\n        ->  softApplications.attemptModifyFromSoftProdVulnerability\n\n      | denyApplications @hidden\n        developer info: \"This is an intermediary attack step to propagate deny on all of the associated applications if the vulnerability has an availability impact.\"\n        ->  softApplications.attemptDenyFromSoftProdVulnerability\n    }", "type": "asset"}
{"input": "This MAL code defines an asset named \"Application\" which represents any type of software process or component, from firmware and operating systems to plugins and sessions. The purpose of this asset is to model potential attack vectors on software applications.\n\nThe MAL code includes several components:\n\n1. **Vulnerabilities**: Represents potential weaknesses or security flaws in the application that an attacker can exploit. These vulnerabilities are categorized as soft product vulnerabilities if they are associated with the software product that the application is running.\n\n2. **Application Connections**: Represents outgoing and incoming connections between applications. Outgoing connections can be either outgoingAppConnections or appConnections, while ingoing connections can be either ingoingAppConnections or appConnections.\n\n3. **Defenses**: The MAL code includes several defense mechanisms that model the effectiveness of various security measures. These defenses include IDPS bypasses, software auditing, and supply chain auditing.\n\nThe logical flow of the MAL code involves several attack steps that represent potential actions an attacker can take to exploit vulnerabilities, gain access to the application, and perform malicious activities. These attack steps include attempting to use vulnerabilities, reverse reach, local and network connect, specific access, accessing networks and connections, and unsafe user activity.\n\nThe MAL code also includes several intermediate attack steps that allow for defenses and trigger bypasses. These steps can be bypassed under certain conditions, such as when defenses are successful or when specific requirements are met (e.g., the attacker has physical access to the hardware).\n\nThe MAL code also includes attack steps that conditionally trigger software product vulnerabilities separately for each application associated with the software product. This is useful for modeling scenarios where the same software product is used across multiple applications, and vulnerabilities in the software product can affect all associated applications.\n\nOverall, the MAL code in this example is designed to model attack scenarios on software applications, including potential vulnerabilities, connections between applications, defense mechanisms, and attack steps that can be taken by an attacker to exploit these vulnerabilities. The code follows best practices for technical documentation, using clear and concise language to explain the purpose and function of each component and attack step.", "output": "asset Application\n      user info: \"An application models any type of software process or component, from firmware and operating systems to plugins and sessions.\"\n      modeler info: \"Applications are some of the most common assets in models due to their versatility and scope.\"\n    {\n      let allVulnerabilities = vulnerabilities \\/ appSoftProduct.softProductVulnerabilities\n\n      let outgoingApplicationConnections = (appConnections \\/ outgoingAppConnections)\n      let ingoingApplicationConnections = (appConnections \\/ ingoingAppConnections)\n\n      # notPresent [Disabled]\n        user info: \"This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility that the Application does not actually exist. Typically this is useful to see what attack steps are removed if a particular non-essential component(e.g. a plugin, library, feature, or service).\"\n        developer info: \"This defense allows for both speculation about the presence of a particular application and to suggest that if it is possible removing it may restrict the attacker's actions.\"\n        ->  successfulUseVulnerability,\n            successfulReverseReach,\n            networkConnectFromResponse,\n            specificAccessFromLocalConnection,\n            specificAccessFromNetworkConnection,\n            localAccess,\n            networkAccess,\n            successfulUnsafeUserActivity,\n            fullAccessFromSupplyChainCompromise,\n            readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability,\n            successfulApplicationRespondConnectThroughData,\n            successfulAuthorizedApplicationRespondConnectThroughData,\n            successfulRead,\n            successfulModify,\n            successfulDeny\n\n      | attemptUseVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUseVulnerability,\n            protectorIDPSs.bypassEffectiveness\n\n      & successfulUseVulnerability @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  useVulnerability\n\n      | useVulnerability\n        user info: \"Try to exploit the associated vulnerabilities.\"\n        developer info: \"This includes vulnerabilities associated with the SoftwareProduct that this Application is running as well.\"\n        ->  allVulnerabilities().attemptAbuse,\n            attemptSoftwareProductAbuse,\n            readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability\n\n      | attemptReverseReach @entrypoint\n        user info: \"The attacker is reachable from this Application therefore start propagating reverse reach from it. Reverse reach is used to determine whether or not the attacker can be reached by the user.\"\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        modeler info: \"If the entry point of the attacker is an Application this attack step needs to be explicitly called on it by the modeler in order to have reverse reach start propagating from the Application to the rest of the assets in the model. This is the case because no other attack step on the Application asset triggers this attack step.\"\n        ->  successfulReverseReach\n\n      & successfulReverseReach @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  reverseReach\n\n      | reverseReach @hidden\n        developer info: \"Reverse reach is used to determine whether or not the attacker can be reached by the user. Reverse reach propagates toward outgoing or bidirectional communications.\"\n        ->  networks.attemptReverseReach,\n            ingoingApplicationConnections().attemptReverseReach,\n            appExecutedApps.attemptReverseReach,\n            attackerUnsafeUserActivityCapabilityWithReverseReach,\n            containedData.attemptReverseReach,\n            sentData.attemptReverseReach,\n            receivedData.attemptReverseReach,\n            networkConnectFromResponse\n\n      | localConnect\n        user info: \"The attacker can interface with the Application without going through networking communications. This is achieved by gaining full access on a hosted Application, specific access on the hosting Application, physical access on the hardware on which the Application is running, or via unsafe user activity.\"\n        ->  localAccess,\n            specificAccessFromLocalConnection,\n            attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application\n            allVulnerabilities().localAccessAchieved,\n            softwareProductVulnerabilityLocalAccessAchieved\n\n      | networkConnectUninspected\n        user info: \"An attacker can connect to any network exposed application and try to authenticate or trigger vulnerabilities.\"\n        ->  attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application\n            allVulnerabilities().networkAccessAchieved,\n            softwareProductVulnerabilityNetworkAccessAchieved,\n            networkConnect,\n            specificAccessNetworkConnect\n\n      | networkConnectInspected\n        user info: \"If the network communications occur via any ConnectionRules that have their payload inspected the attacker can still authenticate, but they cannot trigger vulnerabilities.\"\n        ->  networkConnect,\n            specificAccessNetworkConnect\n\n      | networkConnect @hidden\n        developer info: \"Intermediate attack step.\"\n        ->  networkAccess\n\n      | specificAccessNetworkConnect @hidden\n        developer info: \"Intermediate attack step.\"\n        ->  specificAccessFromNetworkConnection\n\n      | accessNetworkAndConnections @hidden\n        developer info: \"The attacker can access outgoing and bidirectional networks and connections associated with the application.\"\n        ->  networks.accessUninspected,\n            networks.accessInspected,\n            outgoingApplicationConnections().attemptConnectToApplicationsUninspected,\n            outgoingApplicationConnections().attemptConnectToApplicationsInspected,\n            outgoingApplicationConnections().attemptAccessNetworksUninspected,\n            outgoingApplicationConnections().attemptAccessNetworksInspected\n\n      | attemptNetworkConnectFromResponse @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  networkConnectFromResponse\n\n      & networkConnectFromResponse @hidden [VeryHardAndUncertain]\n        developer info: \"An attacker may be able to respond to requests submitted by a client application.\"\n        ->  networkConnectUninspected\n\n      & specificAccessFromLocalConnection @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for specific access.\"\n        ->  specificAccess\n\n      & specificAccessFromNetworkConnection @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for specific access.\"\n        ->  specificAccess\n\n      | specificAccess\n        user info: \"The adversary is able to gain low-privilege access on the Application which allows them to access the networks and connections associated with it and locally connect to hosted Applications. Additionally, if they have the required privileges the attacker may also access data hosted, sent, or received by the Application.\"\n        ->  appExecutedApps.localConnect, // An attacker with low-privilege access on the executing instance is assumed to be able to locally interact with the executed applications.\n            specificAccessRead,\n            specificAccessModify,\n            specificAccessDelete,\n            bypassContainerization,\n            attemptUseVulnerability, // Attempt to exploit all the vulnerabilities associated with the Application\n            attemptAuthorizedApplicationRespondConnectThroughData,\n            accessNetworkAndConnections // and access the network(s) and connections on/to which the app is connected\n\n      | bypassContainerization [HardAndUncertain]\n        user info: \"The attacker is able to break out of an application container/sandbox and try to exploit any vulnerability of the host application.\"\n        ->  hostApp.attemptUseVulnerability\n\n      | authenticate\n        user info: \"The attacker is able to authenticate with the appropriate high-level privileges.\"\n        ->  localAccess,\n            networkAccess,\n            allVulnerabilities().highPrivilegesAchieved,\n            softwareProductVulnerabilityHighPrivilegesAchieved\n\n      | specificAccessAuthenticate\n        user info: \"The attacker is able to authenticate with the appropriate low-level privileges.\"\n        ->  specificAccessFromLocalConnection,\n            specificAccessFromNetworkConnection,\n            allVulnerabilities().lowPrivilegesAchieved,\n            softwareProductVulnerabilityLowPrivilegesAchieved\n\n      & localAccess @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for full access.\"\n        ->  fullAccess\n\n      & networkAccess @hidden\n        developer info: \"Intermediate attack steps for modeling the two requirements (reachability and authentication) for full access.\"\n        ->  fullAccess\n\n      | fullAccess @entrypoint {C,I,A}\n        user info: \"Full access on the Application means the attacker has complete control of the application and can perform any actions within its execution context.\"\n        modeler info: \"It is common in models for the attacker to be granted full access on an Application, representing their own tools, that is connected to the Internet to explore possible attack vectors.\"\n        ->  attemptRead,\n            attemptModify,\n            attemptDeny,\n            executionPrivIAMs.attemptAssume,  // Assume also the execution privilege identities of this application to the access to the entire execution context\n            attemptApplicationRespondConnectThroughData,\n            accessNetworkAndConnections,  // and access the network(s) and connections on/to which the app is connected\n            hostApp.localConnect,    // and localConnect on the host application\n            managedRoutingFw.attemptModify, // if the routing firewall manager app is compromised the routing firewall should also be compromised\n            hostHardware.attemptSpreadWormThroughRemovableMedia, // Propagate malware worms through removable media\n            hostHardware.attemptUseVulnerabilityFromSoftwareFullAccess, // If this application is run directly on hardware full access on it allows the attacker to exploit hardware vulnerabilities that do not require physical access\n            specificAccess // And also provide specificAccess, mainly for completeness and more intuitive results\n\n      | physicalAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to propagate physical access throughout application nesting.\"\n        ->  allVulnerabilities().physicalAccessAchieved,\n            softwareProductVulnerabilityPhysicalAccessAchieved,\n            appExecutedApps.physicalAccessAchieved\n\n      | attemptUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  successfulUnsafeUserActivity,\n            attackerUnsafeUserActivityCapabilityWithReverseReach, // If the user can reach the attacker via networking assets this makes the unsafe user actions much easier to perform\n            attackerUnsafeUserActivityCapabilityWithoutReverseReach, // Without being able to reach the attacker the User can still perform malicious actions on their behalf, but it is much more complicated\n            protectorIDPSs.bypassEffectiveness\n\n      & successfulUnsafeUserActivity @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  unsafeUserActivity\n\n      | unsafeUserActivity\n        user info: \"The unsafe actions of users on this application open it up to attacks and enable vulnerabilities that require user interaction.\"\n        ->  localConnect,\n            networkConnectUninspected,\n            allVulnerabilities().userInteractionAchieved\n\n      | attackerUnsafeUserActivityCapability @hidden\n        developer info: \"The impacts of the user's unsafe actions are greatly limited if there are no channels through which the attacker can be reached by the unwitting user.\"\n        ->  successfulUnsafeUserActivity\n\n      & attackerUnsafeUserActivityCapabilityWithReverseReach @hidden\n        developer info: \"The attacker can be reached from this application and can therefore more easily exploit the unsafe user actions.\"\n        ->  attackerUnsafeUserActivityCapability\n\n      | attackerUnsafeUserActivityCapabilityWithoutReverseReach @hidden [VeryHardAndUncertain]\n        developer info: \"The attacker cannot be reached from this application. This means that the autonomous malicious code must either be able to do reconnaissance on the fly or the reconnaissance was done beforehand and coded into it. This is much more complex and difficult than the situation where the attacker is reachable from the application which restricts the capabilities of being successful. Important Note: This step should never directly or indirectly lead to reverse reach as it would fulfil the attacker interactivity requirements it is missing.\"\n        ->  attackerUnsafeUserActivityCapability\n\n      # supplyChainAuditing\n        user info: \"Auditing inside the supply chain can detect possible supply chain attacks.\"\n        ->  supplyChainAuditingBypassed\n\n      | bypassSupplyChainAuditing [VeryHardAndUncertain]\n        user info: \"Supply chain auditing can be bypassed.\"\n        ->  supplyChainAuditingBypassed\n\n      | supplyChainAuditingBypassed @hidden\n        developer info: \"The supply chain audit is bypassed either because it was not set or the attacker was able to circumvent it through additional effort.\"\n        ->  fullAccessFromSupplyChainCompromise\n\n      | attemptFullAccessFromSupplyChainCompromise @hidden\n        developer info: \"Intermediate attack step to allow for defenses and trigger bypasses.\"\n        ->  fullAccessFromSupplyChainCompromise,\n            bypassSupplyChainAuditing\n\n      & fullAccessFromSupplyChainCompromise @hidden\n        developer info: \"Intermediate attack step.\"\n        ->  fullAccess\n\n      /* Intermediate attack steps to allow SoftwareProduct Vulnerabilities to\n       * only happen after each Applications is reached by the attacker.\n       */\n      | attemptReadFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  readFromSoftProdVulnerability\n\n      | attemptModifyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  modifyFromSoftProdVulnerability\n\n      | attemptDenyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  denyFromSoftProdVulnerability\n\n      E softwareCheck @hidden\n        developer info: \"Only enable the following attacks steps if a SoftwareProduct is associated with this Application.\"\n        <-  appSoftProduct\n        ->  readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability\n\n      /* The seven following attack steps were implemented to trigger\n       * SoftwareVulnerabilities on a SoftwareProduct on each Application\n       * associated with the SoftwareProduct individually.\n       */\n      | softwareProductVulnerabilityLocalAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.localAccessAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityNetworkAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.networkAccessAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityPhysicalAccessAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.physicalAccessAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityLowPrivilegesAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.lowPrivilegesAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityHighPrivilegesAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.highPrivilegesAchieved,\n            softwareProductAbuse\n\n      | softwareProductVulnerabilityUserInteractionAchieved @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  appSoftProduct.softProductVulnerabilities.userInteractionAchieved,\n            softwareProductAbuse\n\n      | attemptSoftwareProductAbuse @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  softwareProductAbuse\n\n      & softwareProductAbuse @hidden\n        developer info: \"Intermediate attack step used to conditionally trigger SoftwareProduct vulnerabilities separately for each application.\"\n        ->  readFromSoftProdVulnerability,\n            modifyFromSoftProdVulnerability,\n            denyFromSoftProdVulnerability\n\n      & readFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to handle SoftwareProduct existence.\"\n        ->  attemptRead\n\n      & modifyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to handle SoftwareProduct existence.\"\n        ->  attemptModify\n\n      & denyFromSoftProdVulnerability @hidden\n        developer info: \"Intermediate attack step to handle SoftwareProduct existence.\"\n        ->  attemptDeny\n\n      | attemptApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulApplicationRespondConnectThroughData\n\n      & successfulApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  applicationRespondConnectThroughData\n\n      | applicationRespondConnectThroughData @hidden\n        developer info: \"After full access on the application received data can be used to try a connect through respond to the client side application.\"\n        ->  receivedData.attemptApplicationRespondConnect\n\n      | attemptAuthorizedApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulAuthorizedApplicationRespondConnectThroughData\n\n      & successfulAuthorizedApplicationRespondConnectThroughData @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  authorizedApplicationRespondConnectThroughData\n\n      | authorizedApplicationRespondConnectThroughData @hidden\n        developer info: \"After specific access on the application received data can be used to try a connect through respond to the client side application. To succeed the attacker must also attain write privileges on the received data.\"\n        ->  receivedData.authorizedApplicationRespondConnectFromApplication\n\n      | attemptRead @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulRead\n\n      & successfulRead @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  read\n\n      | read {C}\n        user info: \"The attacker can read some or all of this service's (and executed by this) source code and/or data (both local and sent/received).\"\n        ->  containedData.attemptRead,\n            appExecutedApps.attemptRead, // Read all applications executed by this (host) application\n            sentData.attemptRead, // Both sent and received Data can be read\n            receivedData.attemptRead\n\n      | specificAccessRead {C}\n        user info: \"The attacker can read the service's source code and/or sent and received Data, given the necessary permissions\"\n        ->  containedData.authorizedReadFromApplication,\n            sentData.authorizedReadFromApplication, // Both Data sent and received can be read given the necessary permissions\n            receivedData.authorizedReadFromApplication\n\n      | attemptModify @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulModify\n\n      & successfulModify @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  modify\n\n      | modify {I}\n        user info: \"The attacker can modify some or all of this service's (and executed by this) source code and/or data.\"\n        ->  fullAccess,\n            containedData.attemptWrite,\n            appExecutedApps.attemptModify, // Gain access on all applications executed by this (host) application\n            sentData.attemptWrite // Sent Data can be written/modified\n\n      | specificAccessModify {I}\n        user info: \"The attacker can modify the service's source code and/or sent  Data, given the necessary permissions\"\n        ->  containedData.authorizedWriteFromApplication,\n            sentData.authorizedWriteFromApplication // Sent Data can be written given the necessary permissions\n\n      | attemptDeny @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulDeny\n\n      & successfulDeny @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  deny\n\n      | deny {A}\n        user info: \"The attacker can deny some or all functionality and data pertaining to this application/service as well as executed applications.\"\n        ->  containedData.attemptDeny,\n            appExecutedApps.attemptDeny,\n            sentData.attemptDeny // Sent Data can also be denied\n\n      | specificAccessDelete {A}\n        user info: \"The attacker can delete some or all functionality and data pertaining to this application/service as well as executed applications, given the necessary permissions\"\n        ->  containedData.authorizedDeleteFromApplication,\n            sentData.authorizedDeleteFromApplication // Sent Data can be deleted given the necessary permissions\n\n      & denyFromNetworkingAsset @hidden\n        developer info: \"This is an intermediate attack step to only allow deny on an application when all the connection rules and networks associated with it are denied, because an app can be serving on many different ports.\"\n        ->  attemptDeny\n\n      & denyFromLockout @hidden\n        developer info: \"This is an intermediate attack step to only trigger deny on an application when all the executing access control roles are locked out.\"\n        ->  attemptDeny\n\n    }", "type": "asset"}
{"input": "The provided MAL code defines an Intrusion Detection and Prevention System (IDPS) as an extension of the Application asset. The IDPS is designed to protect other applications from malicious activity, such as exploiting vulnerabilities or unsafe user actions.\n\nThe IDPS asset has the following components:\n\n1. **notPresent** (Disabled): This defense is intended to represent that the IDPS is not present. However, it should be hidden when using modeling tools as it does not function as intended in the current implementation of the MAL. The modeler should adjust the effectiveness defense to reflect the likelihood that the IDPS is present.\n\n2. **effectiveness** [Enabled]: This defense represents the capability of the IDPS to prevent disruptions on the associated applications. The effectiveness of the IDPS can be bypassed, as defined by the `bypassEffectiveness` defense.\n\n3. **bypassEffectiveness** [VeryHardAndUncertain]: This defense signifies that the effectiveness of the IDPS can be bypassed. When this defense is triggered, it leads to the `effectivenessBypassed` state.\n\n4. **effectivenessBypassed**: This state represents that the protective measures of the IDPS have been bypassed. This can occur due to attacker activity or some internal property of the IDPS. When `effectivenessBypassed` is triggered, it affects the protection of all applications assigned to the IDPS, as defined by the `protectedApps.successfulUseVulnerability` and `protectedApps.successfulUnsafeUserActivity` associations.\n\n5. **fullAccess** {C,I,A}: If the IDPS is compromised itself, it can no longer protect the applications assigned to it. This leads to the `effectivenessBypassed` state.\n\n6. **deny** {A}: Similarly, if the IDPS is denied, it can no longer protect the applications assigned to it. This also leads to the `effectivenessBypassed` state.\n\nThe logical flow of the MAL code is as follows:\n\n1. An IDPS is present (`notPresent` is Disabled).\n2. The IDPS effectively prevents disruptions on the associated applications (`effectiveness` is Enabled).\n3. The effectiveness of the IDPS can be bypassed (`bypassEffectiveness` is triggered).\n4. When the effectiveness of the IDPS is bypassed, it affects the protection of all applications assigned to the IDPS (`effectivenessBypassed` is triggered).\n5. If the IDPS is compromised or denied, it can no longer protect the applications assigned to it (`fullAccess` or `deny` is triggered, leading to `effectivenessBypassed`).\n\nIn terms of domain-specific implications, the MAL code highlights that an IDPS is an important defense mechanism for protecting applications from malicious activity. However, it also indicates that the effectiveness of an IDPS can be bypassed, especially if the IDPS itself is compromised or denied. This underscores the need for multiple layers of defense in a cybersecurity system.", "output": "asset IDPS extends Application\n      user info: \"An IDPS(Intrusion Detection and Prevention System) is tasked with protecting other applications from malicious activity, such as exploiting vulnerabilities or unsafe user actions.\"\n    {\n      # notPresent @Override @hidden [Disabled]\n        developer info: \"It would be ideal to hide this defense when using modelling tools to avoid confusion.\"\n        modeler info: \"As per the comment for the effectiveness defense, the notPresent defense does not function as desired for the IDPS asset and should not be used. The effectiveness defense should be adjusted to reflect the likelihood that the IDPS is present instead.\"\n\n      # effectiveness [Enabled]\n        user info: \"The effectiveness defense represents how capable the IDPS is to prevent disruptions from occurring on the associated applications.\"\n        modeler info: \"The notPresent defense should inversely impact the effectiveness defense. However, because this is not currently implemented in coreLang it is up to the modeler to properly take this into account when setting the values of these defenses.\"\n        ->  effectivenessBypassed\n\n      | bypassEffectiveness [VeryHardAndUncertain]\n        user info: \"The effectiveness of an IDPS can be bypassed.\"\n        ->  effectivenessBypassed\n\n      | effectivenessBypassed @hidden\n        developer info: \"The protection of the IDPS has been bypassed either as a result of attacker activity or due to some internal property of the IDPS.\"\n        ->  protectedApps.successfulUseVulnerability,\n            protectedApps.successfulUnsafeUserActivity\n\n      | fullAccess {C,I,A}\n        user info: \"The IDPS is no longer able to protect the apps assigned to it if it has been compromised itself.\"\n        +>  effectivenessBypassed\n\n      | deny {A}\n        developer info: \"The IDPS is no longer able to protect the apps assigned to it if it has been denied itself.\"\n        +>  effectivenessBypassed\n    }", "type": "asset"}
{"input": "Title: MAL Code Analysis - PhysicalZone Asset\n\nDescription:\n\nThe provided MAL code defines a specific asset type called 'PhysicalZone'. This asset represents the physical location where hardware systems and networks are deployed. The primary purpose of a PhysicalZone asset is to provide a context for modeling threats and attacks that involve gaining physical access to the housed hardware and networks.\n\nComponents:\n\n1. **PhysicalZone Asset**: This is the primary component defined in the MAL code. It signifies a physical location housing hardware systems and networks.\n\n2. **GainPhysicalAccess Attack Step**: This is an attack step associated with the PhysicalZone asset. By successfully executing this attack step, an adversary gains physical access to the hardware systems and networks within the PhysicalZone.\n\n   - **EntryPoint**: This is a user-defined attribute within the GainPhysicalAccess attack step. It specifies the location or point of entry through which an adversary can gain physical access to the PhysicalZone.\n\nAssociations:\n\n- Upon successfully executing the GainPhysicalAccess attack step associated with a PhysicalZone, the adversary gains physical access to the following components:\n  - hardwareSystems.physicalAccess: Represents the physical access to the housed hardware systems within the PhysicalZone.\n  - networks.physicalAccess: Represents the physical access to the housed networks within the PhysicalZone.\n\nLogical Flow and Relationships:\n\nThe logical flow of the provided MAL code is straightforward. The PhysicalZone asset is defined, and an attack step named GainPhysicalAccess is associated with it. The GainPhysicalAccess attack step specifies an entry point and results in the adversary gaining physical access to the housed hardware systems and networks within the PhysicalZone.\n\nDomain-Specific Implications:\n\nThe PhysicalZone asset and its associated attack step provide a means for modeling threats and attacks that involve gaining physical access to assets. This is particularly relevant in threat modeling exercises for organizations that rely heavily on on-premises hardware systems and networks.\n\nClarification:\n\nThis MAL code does not cover any defenses or countermeasures to mitigate the risk of gaining physical access to a PhysicalZone. It is important to note that threat modeling should consider both potential attack steps and defensive measures to ensure a comprehensive understanding of the threat landscape.", "output": "asset PhysicalZone\n      user info: \"A physical zone is the location where hardware systems and networks are physically deployed.\"\n    {\n      | gainPhysicalAccess @entrypoint\n        user info: \"By gaining access on a physical zone, physical access on the housed hardware and networks is also attained.\"\n        modeler info: \"This attack step can be used as an entry point when analyzing scenarios that involve gaining physical access to assets.\"\n        ->  hardwareSystems.physicalAccess,\n            networks.physicalAccess\n    }", "type": "asset"}
{"input": "Title: Meta Attack Language (MAL) Associations Section Analysis\n\nIn this section of the Meta Attack Language (MAL), we define various associations between different entities in the threat modeling context, such as Hardware, Application, IDPS, SoftwareProduct, PhysicalZone, and Network.\n\n1. Hardware - SysExecution - Application:\n   - Purpose: This association represents the hardware on which applications are running. The host hardware is not mandatory.\n   - Components:\n     - Hardware: Represents physical or virtual hardware on which applications are executed.\n     - SysExecution: Represents the system execution that hosts the application. This could be an operating system (OS), a virtual machine (VM), or another software environment.\n     - Application: Represents the software applications running on the specified hardware.\n\n2. Application - AppExecution - Application:\n   - Purpose: This association represents sandboxing and containerization scenarios, where applications can be nested. For example, application 1 can run application 2, which in turn runs application 3.\n   - Components:\n     - Application: Represents the software applications running as part of the application hosting.\n     - AppExecution: Represents the execution environment of the application, which could be a sandbox or a container.\n\n3. IDPS - AppProtection - Application:\n   - Purpose: This association represents Intrusion Detection and Prevention Systems (IDPS) that can provide protection to other applications.\n   - Components:\n     - IDPS: Represents the security systems that monitor and respond to intrusions.\n     - AppProtection: Represents the protection provided by the IDPS to the associated application.\n     - Application: Represents the software applications that are protected by the IDPS.\n\n4. SoftwareProduct - AppSoftwareProduct - Application:\n   - Purpose: This association allows an application to be associated with a specific software product that has particular characteristics, such as specific vulnerabilities and deployment repositories.\n   - Components:\n     - SoftwareProduct: Represents a software product with specific properties.\n     - AppSoftwareProduct: Represents the relationship between the software product and the application.\n     - Application: Represents the software applications associated with the software product.\n\n5. PhysicalZone - ZoneInclusion - Hardware/Network:\n   - Purpose: This association represents the access to a physical zone, which grants physical access to either the deployed hardware or networks. Access to the hardware or network does not provide access to the physical zone.\n   - Components:\n     - PhysicalZone: Represents a specific physical area or environment.\n     - ZoneInclusion: Represents the inclusion of hardware or networks within a physical zone.\n     - Hardware/Network: Represents the hardware systems or networks that are part of the physical zone.\n\nThis MAL section provides a clear structure for modeling relationships between various cybersecurity entities, allowing for a more accurate representation of potential threats and defense mechanisms in a given system. Understanding these associations is crucial for effective threat modeling and cybersecurity planning.", "output": "associations {\n  Hardware         [hostHardware]      0..1 <-- SysExecution          --> *    [sysExecutedApps]        Application\n      user info: \"Hardware on which Applications are running. The host hardware is not mandatory to be specified.\"\n  Application      [hostApp]           0..1 <-- AppExecution          --> *    [appExecutedApps]        Application\n      user info: \"Sandboxing and containerization are represented through AppExecution. This application hosting can be nested. For example, application 1 runs application 2 which runs application 3. (Where application 1 is an OS, application 2 is a VM, and application 3 is app running in the VM.)\"\n  IDPS             [protectorIDPSs]       * <-- AppProtection         --> *    [protectedApps]          Application\n      user info: \"IDPSs can provide protection to other applications.\"\n  SoftwareProduct  [appSoftProduct]    0..1 <-- AppSoftwareProduct    --> *    [softApplications]       Application\n      user info: \"An application can be associated with a software product that has some specific characteristics such as specific Vulnerabilities and deployment repository.\"\n  PhysicalZone     [physicalZones]        * <-- ZoneInclusion         --> *    [hardwareSystems]        Hardware\n      user info: \"Access on PhysicalZone will give physicalAccess on the deployed Hardware, but access to the hardware does not provide access to the physical zone (e.g. iLOs).\"\n  PhysicalZone     [physicalZones]        * <-- ZoneInclusion         --> *    [networks]               Network\n      user info: \"Access on PhysicalZone will give physicalAccess on the deployed networks, but access to the network does not provide access to the physical zone.\"\n}", "type": "association"}
