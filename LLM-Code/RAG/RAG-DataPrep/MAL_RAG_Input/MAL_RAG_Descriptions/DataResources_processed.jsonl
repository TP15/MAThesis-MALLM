{"input": "The provided MAL code defines a category named `DataResources` that includes two assets: `Information` and `Data`. This category serves as a foundation for threat modeling cybersecurity scenarios involving data storage and transmission.\n\n1. **Information**: This abstract asset represents any type of information that might be contained inside data. It serves as the basis for more specialized types such as Credentials and SoftwareProduct.\n\n   - **read**: The attacker is able to read the information but may not be able to extract it. This can occur if autonomous code reads it, but lacks the necessary networking connections to transmit it back to the adversary.\n   - **write**: The attacker is able to write the information. This allows them to overwrite, modify, or delete the information.\n   - **delete**: The attacker is able to delete the information. This also includes the ability to deny the information, which means the information becomes inaccessible.\n   - **deny**: The attacker is able to deny the information, making it inaccessible. This is equivalent to deleting the information.\n   - **extract**: The attacker is able to extract the information, which means they have a path available through which they can transfer the information back to a system they control.\n   - **attemptReadFromReplica, attemptWriteFromReplica, attemptDeleteFromReplica, attemptDenyFromReplica, attemptExtractFromReplica**: These attack steps are used to implement data replication. When reading one replica, all other replicas can be read as well since the information contained in them is the same. Information can only be overwritten, deleted, or denied if all replicas have been overwritten, deleted, or denied, respectively.\n\n2. **Data**: This asset represents any form of data that can be stored or transmitted. It includes several attack steps such as:\n\n   - **read**: The attacker can read the data. This means that the data can be used for further attack steps, but the attacker may not have obtained the data. The `extract` attack step covers the scenario where the attacker collects the data.\n   - **write**: The attacker can write to the location of the data, effectively modifying or deleting it.\n   - **delete**: The attacker can delete the data. This also includes the ability to deny the data, which has the same effects as deleting the data.\n   - **deny**: If a Denial of Service (DoS) is performed, data are denied, which is equivalent to deleting the data.\n   - **extract**: The attacker can extract the data.\n   - **authorizedAccessFromApplication**: The attacker can gain access to the data through permissions.\n   - **accessUnencryptedData, accessUnsignedData**: These intermediate attack steps allow effects of `accessUnencryptedData` and `accessUnsignedData` on data after compromising the encryption or signing credentials or when encryption or signing is disabled.\n   - **accessSpoofedData, accessDecryptedData**: These intermediate attack steps handle defenses and determine the effects on data after compromising the signing credentials or signing is disabled, or after compromising the encryption credentials or encryption is disabled, respectively.\n   - **attemptApplicationRespondConnect**: This intermediate attack step allows for defenses when performing a respond connect attack.\n   - **authorizedApplicationRespondConnectFromApplication, authorizedApplicationRespondConnectFromIAM**: These intermediate attack steps determine if the attacker can attempt a respond connect attack from an Application or if they have obtained the access control permissions required to modify the incoming requests.\n   - **attemptRead, attemptWrite, attemptDelete, attemptDeny**: These intermediate attack steps allow for defenses.\n   - **reverseReach**: This association determines whether or not the data can be transferred to the attacker.\n\nThe MAL code also defines several associations between the assets, such as `containingData`, `containedData`, `sentData`, `receivedData`, `transitData`, `hostedData`, `containerData`, `dataReplicas`, `dataDependedUpon`, and `infoDependedUpon`. These associations help model the relationships between data, applications, networks, and hardware in a cybersecurity threat modeling scenario.", "output": "/*\n * Copyright 2019-2022 coreLang contributors <\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     \n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ncategory DataResources {\n\n    asset Information\n      user info: \"Represents any type of information that might be contained inside Data. This include general purpose information, but also serves as the basis for more specialized types, such as Credentials and SoftwareProduct. Information represents the abstract concept, while Data represent an actual instance of information stored or transmitted digitally.\"\n    {\n      | read\n        user info: \"The attacker is able to read the information. They may still be unable to extract it, which represents the adversary being able to read it themselves. This is the case if autonomous code is able to read it, but lack the required networking connections to transmit it back to the adversary.\"\n        ->  dataReplicas.read,\n            containerData.read\n\n      | write\n        user info: \"The attacker is able to write the information.\"\n        ->  dataReplicas.write,\n            containerData.write,\n            dependentApps.fullAccess,\n            delete\n\n      | delete\n        user info: \"The attacker is able to delete the information.\"\n        ->  dataReplicas.delete,\n            containerData.delete,\n            deny\n\n      | deny\n        user info: \"The attacker is able to deny the information.\"\n        ->  dataReplicas.deny,\n            containerData.deny,\n            dependentApps.deny\n\n      | extract\n        user info: \"The attacker is able to extract the information. This means that they have a path available through which they can transfer the information back to a system that they control.\"\n\n      // The following 5 attack steps are used to implement data replication\n      | attemptReadFromReplica @hidden\n        developer info: \"Reading one replica allows the attacker to read all other replicas as well since the information contained in them is the same.\"\n        ->  read\n\n      & attemptWriteFromReplica @hidden\n        developer info: \"Information can be overwritten only if all replicas have been overwritten.\"\n        ->  write\n\n      & attemptDeleteFromReplica @hidden\n        developer info: \"Information can be deleted only if all replicas have been deleted.\"\n        ->  delete\n\n      & attemptDenyFromReplica @hidden\n        developer info: \"Information can be denied only if all replicas have been denied.\"\n        ->  deny\n\n      | attemptExtractFromReplica @hidden\n        developer info: \"The attacker attempts to extract the information.\"\n        ->  extract\n    }\n\n    asset Data\n      user info: \"Any form of data that can be stored or transmitted.\"\n    {\n      # notPresent [Disabled]\n        user info: \"This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility of data not existing on the associated container (i.e. Hardware, Application, Network, etc.).\"\n        developer info: \"Enabling this defense should make the asset behave as if it did not exist, as such all of its impactful attack steps should be disabled by it.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDeny,\n            successfulDelete,\n            reverseReach,\n            extract\n\n      | authorizedAccessFromApplication @hidden\n        developer info: \"Try to gain access to the data through permissions.\"\n        ->  authorizedReadFromApplication,\n            authorizedWriteFromApplication,\n            authorizedDeleteFromApplication\n\n      !E dataEncrypted @hidden\n        developer info: \"If the data are encrypted then accessing them requires the associated encryption credentials/key. Data will be considered encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is triggered.\"\n        <-  encryptCreds\n        ->  accessUnencryptedData\n\n      !E dataSigned @hidden\n        developer info: \"If the data are signed then writing them requires the associated signing credentials/key. Data will be considered signed if there is at least one Credentials asset associated with it. Otherwise, 'accessUnsignedData' is triggered.\"\n        <-  signingCreds\n        ->  accessUnsignedData\n\n      E payloadInspectionBypassFromEncryptedData @hidden\n        developer info: \"If the data are encrypted then payload inspection cannot be performed on the connection rules they are transmitted over.\"\n        <-  encryptCreds\n        ->  bypassPayloadInspectionFromEncryptedData\n\n      let senderOutgoingApplicationConnections = (senderApp.appConnections \\/ senderApp.outgoingAppConnections)\n      let receiverIngoingApplicationConnections = (receiverApp.appConnections \\/ receiverApp.ingoingAppConnections)\n      let transitNetworkInboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.ingoingNetConnections \\/ transitNetwork.diodeIngoingNetConnections)\n      let transitNetworkOutboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.outgoingNetConnections)\n      | bypassPayloadInspectionFromEncryptedData @hidden\n        developer info: \"The connection rules that the encrypted data traverse over cannot provide payload inspection since they are assumed to permit encrypted traffic. This implies that the attacker could simply encrypt their own communications to evade inspection.\"\n        ->  (senderOutgoingApplicationConnections() /\\ transitNetworkInboundAllowedConnections()).payloadInspectionBypassed,\n            (receiverIngoingApplicationConnections() /\\ transitNetworkOutboundAllowedConnections()).payloadInspectionBypassed\n\n      & accessUnencryptedData @hidden\n        developer info: \"If data are unencrypted then access them.\"\n        ->  accessDecryptedData\n\n      & accessUnsignedData @hidden\n        developer info: \"If data are unsigned then alter them.\"\n        ->  accessSpoofedData\n\n      | accessSpoofedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnsignedData' on data after compromising the signing credentials or signing is disabled.\"\n        ->  applicationRespondConnect,\n            successfulWrite\n\n      | accessDecryptedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDelete\n\n      | attemptApplicationRespondConnect @hidden\n        developer info: \"Intermediate attack step to handle defenses.\"\n        ->  applicationRespondConnect\n\n      & applicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data.\"\n        ->  senderApp.attemptNetworkConnectFromResponse,\n            containedData.applicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromApplication @hidden\n        developer info: \"The adversary can attempt a respond connect attack from an Application, but they still require write permissions in order to perform it.\"\n        ->  authorizedApplicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to modify the incoming requests.\"\n        ->  authorizedApplicationRespondConnect\n\n      & authorizedApplicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data. If they only have specific access on the Application we need to see if they also have the required permissions.\"\n        ->  attemptApplicationRespondConnect\n\n      | attemptRead @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulRead\n\n      & successfulRead @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  read\n\n      | read {C}\n        user info: \"The attacker can read the data. This means that the data can be used for further attack steps, but they are not necessarily obtained by the attacker. The extract attack step covers the scenario where the attacker actually collects the data.\"\n        ->  containedData.attemptRead,\n            information.read,\n            replicatedInformation.attemptReadFromReplica,\n            extract\n\n      | authorizedReadFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to read the data.\"\n        ->  authorizedRead\n\n      | authorizedReadFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to read it.\"\n        ->  authorizedRead\n\n      & authorizedRead @hidden\n        developer info: \"An attacker is able to read the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptRead\n\n      | attemptWrite @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulWrite\n\n      & successfulWrite @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  write\n\n      | write {I}\n        user info: \"The attacker can write to the location of the data, effectively modifying or deleting it.\"\n        ->  containedData.attemptWrite,\n            information.write,\n            replicatedInformation.attemptWriteFromReplica,\n            dependentApps.fullAccess,\n            attemptDelete\n\n      | authorizedWriteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to write the data.\"\n        ->  authorizedWrite\n\n      | authorizedWriteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to write it.\"\n        ->  authorizedWrite\n\n      & authorizedWrite @hidden\n        developer info: \"An attacker is able to write the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptWrite\n\n      | attemptDelete @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        -> successfulDelete\n\n      & successfulDelete @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  delete\n\n      | delete {I,A}\n        user info: \"The attacker can delete the data.\"\n        ->  containedData.attemptDelete,\n            information.delete,\n            replicatedInformation.attemptDeleteFromReplica,\n            attemptDeny\n\n      | authorizedDeleteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to delete the data.\"\n        ->  authorizedDelete\n\n      | authorizedDeleteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to delete it.\"\n        ->  authorizedDelete\n\n      & authorizedDelete @hidden\n        developer info: \"An attacker is able to delete the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptDelete\n\n      | attemptDeny @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulDeny\n\n      & successfulDeny @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  deny\n\n      | deny {A}\n        user info: \"If a DoS is performed data are denied, it has the same effects as deleting the data.\"\n        ->  containedData.attemptDeny,\n            information.deny,\n            replicatedInformation.attemptDenyFromReplica,\n            dependentApps.deny\n\n      & denyFromLockout @hidden\n        developer info: \"This is an intermediate attack step to only trigger deny on data when all the access control roles that can read them are locked out.\"\n        ->  attemptDeny\n\n      | attemptReverseReach @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  reverseReach\n\n      & reverseReach @hidden\n        developer info: \"Reverse reach for Data is used to determine whether or not the data can be transferred to attacker.\"\n        ->  extract,\n            containedData.attemptReverseReach\n\n      & extract\n        user info: \"The attacker can extract the data. The read attack step represents just being able to make use of the data for further attack steps without the attacker obtaining it.\"\n        ->  information.extract,\n            replicatedInformation.attemptExtractFromReplica\n    }\n}\n\nassociations {\n  // ### Data related associations\n  Data        [containingData]       * <-- DataContainment       --> *    [containedData]          Data\n      user info: \"Data can be contained inside other data.\"\n  Data        [containedData]        * <-- AppContainment        --> *    [containingApp]          Application\n      user info: \"An application should be able to contain some data.\"\n  Data        [sentData]             * <-- SendData              --> *    [senderApp]              Application\n      user info: \"An application can also send some data that are supposed to be transferred over a network or connection. This expresses an active connection.\"\n  Data        [receivedData]         * <-- ReceiveData           --> *    [receiverApp]            Application\n      user info: \"An application can also receive some data that are supposed to be transferred over a network or connection. This expresses an active connection.\"\n  Data        [transitData]          * <-- DataInTransit         --> *    [transitNetwork]         Network\n      user info: \"A network can also contain some data that are supposed to be network-wide available.\"\n  Data        [hostedData]           * <-- DataHosting           --> 0..1 [hardware]               Hardware\n      user info: \"Data can be hosted on hardware.\"\n  Data        [containerData]        * <-- InfoContainment       --> *    [information]            Information\n      user info: \"Data can contain information, as for example credentials.\"\n  Data        [dataReplicas]         * <-- Replica               --> *    [replicatedInformation]  Information\n      user info: \"Information can be replicated across multiple data assets that offer redundancy.\"\n  // ### Application dependence associations\n  /* Dependence is used to represent various situations where the operations\n   * of the Application are impacted by modifying/denying the Data/Information\n   * it depends upon. Examples of this type of behavior are configurations,\n   * plugins, libraries, or other input data that is critical to the purpose\n   * of the software component represented by the Application. This\n   * association should only be used for circumstances where the workflow of\n   * the Application is not altered, but the Data/Information are modified\n   * within the regular operating process. For situations where abnormal\n   * behaviour is induced to impact the Application SoftwareVulnerabilities\n   * should be used instead.\n   */\n  Data        [dataDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application\n      user info: \"Data can be specified as a dependence for an Application.\"\n  Information [infoDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application\n      user info: \"Information can be specified as a dependence for an Application.\"\n}", "type": "language"}
{"input": "This Meta Attack Language (MAL) code defines a category named `DataResources` which includes two assets: `Information` and `Data`.\n\n1. The `Information` asset represents any type of information that might be contained inside data. It serves as the basis for more specialized types such as `Credentials` and `SoftwareProduct`. The `Information` asset has several attack steps: `read`, `write`, `delete`, `deny`, and `extract`.\n\n   - `read` allows the attacker to read the information, but not necessarily obtain it. The attacker might still be unable to extract it, even if they can read it. This is the case if autonomous code can read it but lacks the required networking connections to transmit it back to the attacker.\n\n   - `write` allows the attacker to write the information. This also enables the attacker to delete the information and deny its access.\n\n   - `delete` allows the attacker to delete the information.\n\n   - `deny` allows the attacker to deny the information, which has the same effects as deleting the data.\n\n   - `extract` allows the attacker to extract the information, meaning the attacker has a path available through which they can transfer the information back to a system they control.\n\n   - There are also hidden attack steps (denoted by the `@hidden` keyword) that are used to implement data replication and handle defenses.\n\n2. The `Data` asset represents any form of data that can be stored or transmitted. It has several defenses, attack steps, and hidden attack steps.\n\n   - The `notPresent` defense is used to reason about the attack vectors introduced by this asset. It models the possibility of data not existing on the associated container.\n\n   - `authorizedAccessFromApplication` tries to gain access to the data through permissions.\n\n   - If the data are encrypted, accessing them requires the associated encryption credentials/key. Data will be considered encrypted if there is at least one `Credentials` instance associated with it. Otherwise, `accessUnencryptedData` is triggered.\n\n   - If the data are signed, writing them requires the associated signing credentials/key. Data will be considered signed if there is at least one `Credentials` asset associated with it. Otherwise, `accessUnsignedData` is triggered.\n\n   - There are several attack steps related to bypassing payload inspection when data are encrypted.\n\n   - `accessUnencryptedData` and `accessUnsignedData` are intermediate attack steps that allow effects of `accessUnencryptedData` on data after compromising the encryption credentials or signing is disabled, and `accessUnsignedData` on data after compromising the signing credentials or signing is disabled, respectively.\n\n   - Various attack steps are defined to handle defenses, read, write, delete, deny, and extract data, and attempt reverse reach to determine whether or not the data can be transferred to the attacker.\n\nThis MAL code provides a detailed model for analyzing and understanding the attack paths on data resources, including data encryption, signing, and replication. It also takes into account various defenses that can be implemented to protect the data.", "output": "category DataResources {\n\n    asset Information\n      user info: \"Represents any type of information that might be contained inside Data. This include general purpose information, but also serves as the basis for more specialized types, such as Credentials and SoftwareProduct. Information represents the abstract concept, while Data represent an actual instance of information stored or transmitted digitally.\"\n    {\n      | read\n        user info: \"The attacker is able to read the information. They may still be unable to extract it, which represents the adversary being able to read it themselves. This is the case if autonomous code is able to read it, but lack the required networking connections to transmit it back to the adversary.\"\n        ->  dataReplicas.read,\n            containerData.read\n\n      | write\n        user info: \"The attacker is able to write the information.\"\n        ->  dataReplicas.write,\n            containerData.write,\n            dependentApps.fullAccess,\n            delete\n\n      | delete\n        user info: \"The attacker is able to delete the information.\"\n        ->  dataReplicas.delete,\n            containerData.delete,\n            deny\n\n      | deny\n        user info: \"The attacker is able to deny the information.\"\n        ->  dataReplicas.deny,\n            containerData.deny,\n            dependentApps.deny\n\n      | extract\n        user info: \"The attacker is able to extract the information. This means that they have a path available through which they can transfer the information back to a system that they control.\"\n\n      // The following 5 attack steps are used to implement data replication\n      | attemptReadFromReplica @hidden\n        developer info: \"Reading one replica allows the attacker to read all other replicas as well since the information contained in them is the same.\"\n        ->  read\n\n      & attemptWriteFromReplica @hidden\n        developer info: \"Information can be overwritten only if all replicas have been overwritten.\"\n        ->  write\n\n      & attemptDeleteFromReplica @hidden\n        developer info: \"Information can be deleted only if all replicas have been deleted.\"\n        ->  delete\n\n      & attemptDenyFromReplica @hidden\n        developer info: \"Information can be denied only if all replicas have been denied.\"\n        ->  deny\n\n      | attemptExtractFromReplica @hidden\n        developer info: \"The attacker attempts to extract the information.\"\n        ->  extract\n    }\n\n    asset Data\n      user info: \"Any form of data that can be stored or transmitted.\"\n    {\n      # notPresent [Disabled]\n        user info: \"This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility of data not existing on the associated container (i.e. Hardware, Application, Network, etc.).\"\n        developer info: \"Enabling this defense should make the asset behave as if it did not exist, as such all of its impactful attack steps should be disabled by it.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDeny,\n            successfulDelete,\n            reverseReach,\n            extract\n\n      | authorizedAccessFromApplication @hidden\n        developer info: \"Try to gain access to the data through permissions.\"\n        ->  authorizedReadFromApplication,\n            authorizedWriteFromApplication,\n            authorizedDeleteFromApplication\n\n      !E dataEncrypted @hidden\n        developer info: \"If the data are encrypted then accessing them requires the associated encryption credentials/key. Data will be considered encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is triggered.\"\n        <-  encryptCreds\n        ->  accessUnencryptedData\n\n      !E dataSigned @hidden\n        developer info: \"If the data are signed then writing them requires the associated signing credentials/key. Data will be considered signed if there is at least one Credentials asset associated with it. Otherwise, 'accessUnsignedData' is triggered.\"\n        <-  signingCreds\n        ->  accessUnsignedData\n\n      E payloadInspectionBypassFromEncryptedData @hidden\n        developer info: \"If the data are encrypted then payload inspection cannot be performed on the connection rules they are transmitted over.\"\n        <-  encryptCreds\n        ->  bypassPayloadInspectionFromEncryptedData\n\n      let senderOutgoingApplicationConnections = (senderApp.appConnections \\/ senderApp.outgoingAppConnections)\n      let receiverIngoingApplicationConnections = (receiverApp.appConnections \\/ receiverApp.ingoingAppConnections)\n      let transitNetworkInboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.ingoingNetConnections \\/ transitNetwork.diodeIngoingNetConnections)\n      let transitNetworkOutboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.outgoingNetConnections)\n      | bypassPayloadInspectionFromEncryptedData @hidden\n        developer info: \"The connection rules that the encrypted data traverse over cannot provide payload inspection since they are assumed to permit encrypted traffic. This implies that the attacker could simply encrypt their own communications to evade inspection.\"\n        ->  (senderOutgoingApplicationConnections() /\\ transitNetworkInboundAllowedConnections()).payloadInspectionBypassed,\n            (receiverIngoingApplicationConnections() /\\ transitNetworkOutboundAllowedConnections()).payloadInspectionBypassed\n\n      & accessUnencryptedData @hidden\n        developer info: \"If data are unencrypted then access them.\"\n        ->  accessDecryptedData\n\n      & accessUnsignedData @hidden\n        developer info: \"If data are unsigned then alter them.\"\n        ->  accessSpoofedData\n\n      | accessSpoofedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnsignedData' on data after compromising the signing credentials or signing is disabled.\"\n        ->  applicationRespondConnect,\n            successfulWrite\n\n      | accessDecryptedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDelete\n\n      | attemptApplicationRespondConnect @hidden\n        developer info: \"Intermediate attack step to handle defenses.\"\n        ->  applicationRespondConnect\n\n      & applicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data.\"\n        ->  senderApp.attemptNetworkConnectFromResponse,\n            containedData.applicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromApplication @hidden\n        developer info: \"The adversary can attempt a respond connect attack from an Application, but they still require write permissions in order to perform it.\"\n        ->  authorizedApplicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to modify the incoming requests.\"\n        ->  authorizedApplicationRespondConnect\n\n      & authorizedApplicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data. If they only have specific access on the Application we need to see if they also have the required permissions.\"\n        ->  attemptApplicationRespondConnect\n\n      | attemptRead @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulRead\n\n      & successfulRead @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  read\n\n      | read {C}\n        user info: \"The attacker can read the data. This means that the data can be used for further attack steps, but they are not necessarily obtained by the attacker. The extract attack step covers the scenario where the attacker actually collects the data.\"\n        ->  containedData.attemptRead,\n            information.read,\n            replicatedInformation.attemptReadFromReplica,\n            extract\n\n      | authorizedReadFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to read the data.\"\n        ->  authorizedRead\n\n      | authorizedReadFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to read it.\"\n        ->  authorizedRead\n\n      & authorizedRead @hidden\n        developer info: \"An attacker is able to read the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptRead\n\n      | attemptWrite @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulWrite\n\n      & successfulWrite @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  write\n\n      | write {I}\n        user info: \"The attacker can write to the location of the data, effectively modifying or deleting it.\"\n        ->  containedData.attemptWrite,\n            information.write,\n            replicatedInformation.attemptWriteFromReplica,\n            dependentApps.fullAccess,\n            attemptDelete\n\n      | authorizedWriteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to write the data.\"\n        ->  authorizedWrite\n\n      | authorizedWriteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to write it.\"\n        ->  authorizedWrite\n\n      & authorizedWrite @hidden\n        developer info: \"An attacker is able to write the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptWrite\n\n      | attemptDelete @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        -> successfulDelete\n\n      & successfulDelete @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  delete\n\n      | delete {I,A}\n        user info: \"The attacker can delete the data.\"\n        ->  containedData.attemptDelete,\n            information.delete,\n            replicatedInformation.attemptDeleteFromReplica,\n            attemptDeny\n\n      | authorizedDeleteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to delete the data.\"\n        ->  authorizedDelete\n\n      | authorizedDeleteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to delete it.\"\n        ->  authorizedDelete\n\n      & authorizedDelete @hidden\n        developer info: \"An attacker is able to delete the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptDelete\n\n      | attemptDeny @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulDeny\n\n      & successfulDeny @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  deny\n\n      | deny {A}\n        user info: \"If a DoS is performed data are denied, it has the same effects as deleting the data.\"\n        ->  containedData.attemptDeny,\n            information.deny,\n            replicatedInformation.attemptDenyFromReplica,\n            dependentApps.deny\n\n      & denyFromLockout @hidden\n        developer info: \"This is an intermediate attack step to only trigger deny on data when all the access control roles that can read them are locked out.\"\n        ->  attemptDeny\n\n      | attemptReverseReach @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  reverseReach\n\n      & reverseReach @hidden\n        developer info: \"Reverse reach for Data is used to determine whether or not the data can be transferred to attacker.\"\n        ->  extract,\n            containedData.attemptReverseReach\n\n      & extract\n        user info: \"The attacker can extract the data. The read attack step represents just being able to make use of the data for further attack steps without the attacker obtaining it.\"\n        ->  information.extract,\n            replicatedInformation.attemptExtractFromReplica\n    }\n}", "type": "category"}
{"input": "This MAL code defines a threat model for a cybersecurity scenario involving the manipulation of user information, which can represent various types of data, including general purpose information, credentials, and software products. The model consists of several components:\n\n1. **Assets**: The primary asset in this model is `user info`. It represents any type of information stored or transmitted digitally.\n\n2. **Attack Steps**: The attacker can perform several actions on the user information, which are defined as attack steps:\n   - `read`: The attacker is able to read the information without necessarily being able to extract it. This can occur when autonomous code reads the information but lacks the necessary networking connections to transmit it back to the attacker.\n   - `write`: The attacker is able to modify the information stored in the data replicas, container data, and, given full access, dependent applications.\n   - `delete`: The attacker is able to delete the information from the data replicas, container data, and, by denying access, dependent applications.\n   - `deny`: The attacker is able to deny access to the information for data replicas, container data, and dependent applications.\n   - `extract`: The attacker is able to extract the information, meaning they have a path available through which they can transfer the information back to a system they control.\n\n3. **Data Replicas**: The attacker can attempt to read, write, delete, deny, or extract information from replicas. Reading one replica allows the attacker to read all other replicas since the information contained in them is the same. Information can only be overwritten, deleted, denied, or extracted if all replicas have been affected.\n\n4. **Container Data**: The attacker can read, write, delete, or deny access to container data, which likely represents the primary storage of user information.\n\n5. **Dependent Apps**: The attacker can gain full access to, delete, or deny access to dependent applications, implying that these applications rely on the user information for their operation.\n\nThis MAL code outlines a threat model for an attacker attempting to manipulate user information through various means, such as reading, writing, deleting, denying access, or extracting the information. The model takes into account data replication, as the attacker can only affect all replicas to successfully perform certain actions.", "output": "asset Information\n      user info: \"Represents any type of information that might be contained inside Data. This include general purpose information, but also serves as the basis for more specialized types, such as Credentials and SoftwareProduct. Information represents the abstract concept, while Data represent an actual instance of information stored or transmitted digitally.\"\n    {\n      | read\n        user info: \"The attacker is able to read the information. They may still be unable to extract it, which represents the adversary being able to read it themselves. This is the case if autonomous code is able to read it, but lack the required networking connections to transmit it back to the adversary.\"\n        ->  dataReplicas.read,\n            containerData.read\n\n      | write\n        user info: \"The attacker is able to write the information.\"\n        ->  dataReplicas.write,\n            containerData.write,\n            dependentApps.fullAccess,\n            delete\n\n      | delete\n        user info: \"The attacker is able to delete the information.\"\n        ->  dataReplicas.delete,\n            containerData.delete,\n            deny\n\n      | deny\n        user info: \"The attacker is able to deny the information.\"\n        ->  dataReplicas.deny,\n            containerData.deny,\n            dependentApps.deny\n\n      | extract\n        user info: \"The attacker is able to extract the information. This means that they have a path available through which they can transfer the information back to a system that they control.\"\n\n      // The following 5 attack steps are used to implement data replication\n      | attemptReadFromReplica @hidden\n        developer info: \"Reading one replica allows the attacker to read all other replicas as well since the information contained in them is the same.\"\n        ->  read\n\n      & attemptWriteFromReplica @hidden\n        developer info: \"Information can be overwritten only if all replicas have been overwritten.\"\n        ->  write\n\n      & attemptDeleteFromReplica @hidden\n        developer info: \"Information can be deleted only if all replicas have been deleted.\"\n        ->  delete\n\n      & attemptDenyFromReplica @hidden\n        developer info: \"Information can be denied only if all replicas have been denied.\"\n        ->  deny\n\n      | attemptExtractFromReplica @hidden\n        developer info: \"The attacker attempts to extract the information.\"\n        ->  extract\n    }", "type": "asset"}
{"input": "This MAL code defines a threat modeling language for cybersecurity focused on data assets. The primary asset in this model is user information, which can be stored or transmitted.\n\nThe MAL code outlines various defensive measures and attack steps related to this data asset. The defense \"notPresent\" is used to model the scenario where the data is not present on the associated container (Hardware, Application, Network, etc.). By enabling this defense, all attack steps that rely on the presence of data are disabled.\n\nAttack steps include \"authorizedAccessFromApplication\", \"accessUnencryptedData\", \"accessUnsignedData\", \"accessSpoofedData\", \"accessDecryptedData\", \"attemptApplicationRespondConnect\", \"attemptRead\", \"successfulRead\", \"read\", \"attemptWrite\", \"successfulWrite\", \"write\", \"attemptDelete\", \"successfulDelete\", \"delete\", \"attemptDeny\", \"successfulDeny\", \"deny\", \"attemptReverseReach\", and \"reverseReach\".\n\n\"authorizedAccessFromApplication\" represents an attempt to gain access to the data through permissions. \"accessUnencryptedData\" and \"accessUnsignedData\" represent accessing unencrypted and unsigned data respectively. \"accessSpoofedData\" is an intermediate attack step that allows the effects of \"accessUnsignedData\" on data after the signing credentials or signing is disabled. \"accessDecryptedData\" is another intermediate step that allows the effects of \"accessUnencryptedData\" on data after the encryption credentials or encryption is disabled.\n\n\"attemptApplicationRespondConnect\" is an intermediate attack step to handle defenses. \"attemptRead\", \"read\", \"attemptWrite\", \"write\", \"attemptDelete\", and \"delete\" are attack steps that represent the attempt and successful completion of reading, writing, and deleting data respectively. \"attemptDeny\" and \"deny\" represent attempts and successful denial of data. \"attemptReverseReach\" and \"reverseReach\" are used to determine whether or not the data can be transferred to the attacker.\n\nThe MAL code also includes several hidden elements that are not directly exposed to the user. These include \"encryptCreds\" and \"signingCreds\", which are used to determine if data are encrypted or signed respectively. \"payloadInspectionBypassFromEncryptedData\" is triggered if data are encrypted and represents the bypassing of payload inspection on the connection rules they are transmitted over. \"bypassPayloadInspectionFromEncryptedData\" is an intermediate attack step that implies the connection rules that the encrypted data traverse over cannot provide payload inspection since they are assumed to permit encrypted traffic.\n\nOverall, this MAL code provides a comprehensive model for analyzing cybersecurity threats related to user information, including defensive measures and various attack steps. It is designed for a technical audience and uses clear, professional language to explain the purpose and function of each component.", "output": "asset Data\n      user info: \"Any form of data that can be stored or transmitted.\"\n    {\n      # notPresent [Disabled]\n        user info: \"This defense is used to reason about the attack vectors introduced by this asset. It should be used to model the possibility of data not existing on the associated container (i.e. Hardware, Application, Network, etc.).\"\n        developer info: \"Enabling this defense should make the asset behave as if it did not exist, as such all of its impactful attack steps should be disabled by it.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDeny,\n            successfulDelete,\n            reverseReach,\n            extract\n\n      | authorizedAccessFromApplication @hidden\n        developer info: \"Try to gain access to the data through permissions.\"\n        ->  authorizedReadFromApplication,\n            authorizedWriteFromApplication,\n            authorizedDeleteFromApplication\n\n      !E dataEncrypted @hidden\n        developer info: \"If the data are encrypted then accessing them requires the associated encryption credentials/key. Data will be considered encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is triggered.\"\n        <-  encryptCreds\n        ->  accessUnencryptedData\n\n      !E dataSigned @hidden\n        developer info: \"If the data are signed then writing them requires the associated signing credentials/key. Data will be considered signed if there is at least one Credentials asset associated with it. Otherwise, 'accessUnsignedData' is triggered.\"\n        <-  signingCreds\n        ->  accessUnsignedData\n\n      E payloadInspectionBypassFromEncryptedData @hidden\n        developer info: \"If the data are encrypted then payload inspection cannot be performed on the connection rules they are transmitted over.\"\n        <-  encryptCreds\n        ->  bypassPayloadInspectionFromEncryptedData\n\n      let senderOutgoingApplicationConnections = (senderApp.appConnections \\/ senderApp.outgoingAppConnections)\n      let receiverIngoingApplicationConnections = (receiverApp.appConnections \\/ receiverApp.ingoingAppConnections)\n      let transitNetworkInboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.ingoingNetConnections \\/ transitNetwork.diodeIngoingNetConnections)\n      let transitNetworkOutboundAllowedConnections = (transitNetwork.netConnections \\/ transitNetwork.outgoingNetConnections)\n      | bypassPayloadInspectionFromEncryptedData @hidden\n        developer info: \"The connection rules that the encrypted data traverse over cannot provide payload inspection since they are assumed to permit encrypted traffic. This implies that the attacker could simply encrypt their own communications to evade inspection.\"\n        ->  (senderOutgoingApplicationConnections() /\\ transitNetworkInboundAllowedConnections()).payloadInspectionBypassed,\n            (receiverIngoingApplicationConnections() /\\ transitNetworkOutboundAllowedConnections()).payloadInspectionBypassed\n\n      & accessUnencryptedData @hidden\n        developer info: \"If data are unencrypted then access them.\"\n        ->  accessDecryptedData\n\n      & accessUnsignedData @hidden\n        developer info: \"If data are unsigned then alter them.\"\n        ->  accessSpoofedData\n\n      | accessSpoofedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnsignedData' on data after compromising the signing credentials or signing is disabled.\"\n        ->  applicationRespondConnect,\n            successfulWrite\n\n      | accessDecryptedData @hidden\n        developer info: \"Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled.\"\n        ->  applicationRespondConnect,\n            successfulRead,\n            successfulWrite,\n            successfulDelete\n\n      | attemptApplicationRespondConnect @hidden\n        developer info: \"Intermediate attack step to handle defenses.\"\n        ->  applicationRespondConnect\n\n      & applicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data.\"\n        ->  senderApp.attemptNetworkConnectFromResponse,\n            containedData.applicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromApplication @hidden\n        developer info: \"The adversary can attempt a respond connect attack from an Application, but they still require write permissions in order to perform it.\"\n        ->  authorizedApplicationRespondConnect\n\n      | authorizedApplicationRespondConnectFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to modify the incoming requests.\"\n        ->  authorizedApplicationRespondConnect\n\n      & authorizedApplicationRespondConnect @hidden\n        developer info: \"In order to perform a respond connect attack the adversary must be able to write the received data. If they only have specific access on the Application we need to see if they also have the required permissions.\"\n        ->  attemptApplicationRespondConnect\n\n      | attemptRead @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulRead\n\n      & successfulRead @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  read\n\n      | read {C}\n        user info: \"The attacker can read the data. This means that the data can be used for further attack steps, but they are not necessarily obtained by the attacker. The extract attack step covers the scenario where the attacker actually collects the data.\"\n        ->  containedData.attemptRead,\n            information.read,\n            replicatedInformation.attemptReadFromReplica,\n            extract\n\n      | authorizedReadFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to read the data.\"\n        ->  authorizedRead\n\n      | authorizedReadFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to read it.\"\n        ->  authorizedRead\n\n      & authorizedRead @hidden\n        developer info: \"An attacker is able to read the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptRead\n\n      | attemptWrite @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulWrite\n\n      & successfulWrite @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  write\n\n      | write {I}\n        user info: \"The attacker can write to the location of the data, effectively modifying or deleting it.\"\n        ->  containedData.attemptWrite,\n            information.write,\n            replicatedInformation.attemptWriteFromReplica,\n            dependentApps.fullAccess,\n            attemptDelete\n\n      | authorizedWriteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to write the data.\"\n        ->  authorizedWrite\n\n      | authorizedWriteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to write it.\"\n        ->  authorizedWrite\n\n      & authorizedWrite @hidden\n        developer info: \"An attacker is able to write the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptWrite\n\n      | attemptDelete @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        -> successfulDelete\n\n      & successfulDelete @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  delete\n\n      | delete {I,A}\n        user info: \"The attacker can delete the data.\"\n        ->  containedData.attemptDelete,\n            information.delete,\n            replicatedInformation.attemptDeleteFromReplica,\n            attemptDeny\n\n      | authorizedDeleteFromIAM @hidden\n        developer info: \"The attacker has obtained the access control permissions required to delete the data.\"\n        ->  authorizedDelete\n\n      | authorizedDeleteFromApplication @hidden\n        developer info: \"The attacker can reach the data via an Application, but they still require the adequate permissions to delete it.\"\n        ->  authorizedDelete\n\n      & authorizedDelete @hidden\n        developer info: \"An attacker is able to delete the Data through authorized permissions, this requires both access to the Data and the adequate permissions.\"\n        ->  attemptDelete\n\n      | attemptDeny @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  successfulDeny\n\n      & successfulDeny @hidden\n        developer info: \"Intermediate attack step to model defenses.\"\n        ->  deny\n\n      | deny {A}\n        user info: \"If a DoS is performed data are denied, it has the same effects as deleting the data.\"\n        ->  containedData.attemptDeny,\n            information.deny,\n            replicatedInformation.attemptDenyFromReplica,\n            dependentApps.deny\n\n      & denyFromLockout @hidden\n        developer info: \"This is an intermediate attack step to only trigger deny on data when all the access control roles that can read them are locked out.\"\n        ->  attemptDeny\n\n      | attemptReverseReach @hidden\n        developer info: \"Intermediate attack step to allow for defenses.\"\n        ->  reverseReach\n\n      & reverseReach @hidden\n        developer info: \"Reverse reach for Data is used to determine whether or not the data can be transferred to attacker.\"\n        ->  extract,\n            containedData.attemptReverseReach\n\n      & extract\n        user info: \"The attacker can extract the data. The read attack step represents just being able to make use of the data for further attack steps without the attacker obtaining it.\"\n        ->  information.extract,\n            replicatedInformation.attemptExtractFromReplica\n    }", "type": "asset"}
{"input": "Title: Meta Attack Language (MAL) Data and Application Dependence Associations\n\nIn this MAL code, we define various associations between Data, Applications, Information, and Networks. These associations help model the flow and relationships of data within a cybersecurity context.\n\n1. DataContainment: This association represents the relationship between Data and Data, indicating that one data asset can contain another. The contained data is a subset of the containing data.\n\n   User Info: Data can be contained inside other data.\n\n2. AppContainment: This association indicates that an Application contains some Data. This relation suggests that the application has control over the data it contains.\n\n   User Info: An application should be able to contain some data.\n\n3. SendData and ReceiveData: These associations represent active connections between Applications and the transfer of Data. SendData indicates that an Application sends data, while ReceiveData indicates that an Application receives data.\n\n   User Info: An application can send and receive data that are supposed to be transferred over a network or connection.\n\n4. DataInTransit: This association refers to Data being transmitted across a Network, making it network-wide available.\n\n   User Info: A network can contain data that are supposed to be network-wide available.\n\n5. DataHosting: This association indicates that Data is hosted on Hardware.\n\n   User Info: Data can be hosted on hardware.\n\n6. InfoContainment: This association represents the relationship between Data and Information, suggesting that Data can contain Information.\n\n   User Info: Data can contain information, as for example credentials.\n\n7. Replica: This association indicates that Information can be replicated across multiple Data assets, offering redundancy.\n\n   User Info: Information can be replicated across multiple data assets that offer redundancy.\n\n8. Dependence: This association represents the relationship between Applications, Data, or Information, and other Applications, indicating that an Application depends on specific Data or Information to function properly. This relation suggests that modifying or denying the Data/Information could affect the Application's operation without altering its workflow.\n\n   User Info: Data or Information can be specified as a dependence for an Application.\n\nThese associations provide a structured way to model data flow and relationships within a cybersecurity threat modeling context, helping analysts understand potential attack paths and vulnerabilities.", "output": "associations {\n  // ### Data related associations\n  Data        [containingData]       * <-- DataContainment       --> *    [containedData]          Data\n      user info: \"Data can be contained inside other data.\"\n  Data        [containedData]        * <-- AppContainment        --> *    [containingApp]          Application\n      user info: \"An application should be able to contain some data.\"\n  Data        [sentData]             * <-- SendData              --> *    [senderApp]              Application\n      user info: \"An application can also send some data that are supposed to be transferred over a network or connection. This expresses an active connection.\"\n  Data        [receivedData]         * <-- ReceiveData           --> *    [receiverApp]            Application\n      user info: \"An application can also receive some data that are supposed to be transferred over a network or connection. This expresses an active connection.\"\n  Data        [transitData]          * <-- DataInTransit         --> *    [transitNetwork]         Network\n      user info: \"A network can also contain some data that are supposed to be network-wide available.\"\n  Data        [hostedData]           * <-- DataHosting           --> 0..1 [hardware]               Hardware\n      user info: \"Data can be hosted on hardware.\"\n  Data        [containerData]        * <-- InfoContainment       --> *    [information]            Information\n      user info: \"Data can contain information, as for example credentials.\"\n  Data        [dataReplicas]         * <-- Replica               --> *    [replicatedInformation]  Information\n      user info: \"Information can be replicated across multiple data assets that offer redundancy.\"\n  // ### Application dependence associations\n  /* Dependence is used to represent various situations where the operations\n   * of the Application are impacted by modifying/denying the Data/Information\n   * it depends upon. Examples of this type of behavior are configurations,\n   * plugins, libraries, or other input data that is critical to the purpose\n   * of the software component represented by the Application. This\n   * association should only be used for circumstances where the workflow of\n   * the Application is not altered, but the Data/Information are modified\n   * within the regular operating process. For situations where abnormal\n   * behaviour is induced to impact the Application SoftwareVulnerabilities\n   * should be used instead.\n   */\n  Data        [dataDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application\n      user info: \"Data can be specified as a dependence for an Application.\"\n  Information [infoDependedUpon]     * <-- Dependence            --> *    [dependentApps]         Application\n      user info: \"Information can be specified as a dependence for an Application.\"\n}", "type": "association"}
